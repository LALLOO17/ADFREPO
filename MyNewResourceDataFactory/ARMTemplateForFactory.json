{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "MyNewResourceDataFactory"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"LinkServiceOracle_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkServiceOracle'"
		},
		"MyNewLinkService_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'MyNewLinkService'"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "azuresqlserver11192024.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "AzureSqlDataBase"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "kartavya"
		},
		"MyNewLinkService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://lalloonewstorageaccount.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Sc2_pip_QueryJoinHrSchema')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Sc2 QueryJoinHrSchema",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT \r\nEMP.EMPLOYEE_ID, \r\nEMP.FIRST_NAME, \r\nEMP.LAST_NAME,\r\nEMP.HIRE_DATE, \r\nEMP.JOB_ID, \r\nEMP.SALARY,\r\nEMP.DEPARTMENT_ID, \r\nDEPT.DEPARTMENT_NAME, \r\nLOC.CITY, \r\nLOC.STATE_PROVINCE, \r\nCTR.COUNTRY_NAME, \r\nRGN.REGION_NAME, \r\nJB.JOB_TITLE\r\nFROM HR.EMPLOYEES EMP\r\nJOIN HR.DEPARTMENTS DEPT\r\nON EMP.DEPARTMENT_ID = DEPT.DEPARTMENT_ID\r\nJOIN HR.LOCATIONS LOC\r\nON DEPT.LOCATION_ID = LOC.LOCATION_ID\r\nJOIN HR.COUNTRIES CTR\r\nON LOC.COUNTRY_ID = CTR.COUNTRY_ID \r\nJOIN HR.REGIONS RGN\r\nON CTR.REGION_ID = RGN.REGION_ID\r\nJOIN HR.JOBS JB\r\nON EMP.JOB_ID = JB.JOB_ID\r\nJOIN HR.job_history JBH\r\nON JBH.JOB_ID = JB.JOB_ID",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OracleTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TGT_data_target_ParamFileName",
								"type": "DatasetReference",
								"parameters": {
									"DataSetParamFileName": {
										"value": "@pipeline().parameters.TargetFileName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TargetFileName": {
						"type": "string",
						"defaultValue": "NEW.csv"
					}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-08T17:12:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleTable1')]",
				"[concat(variables('factoryId'), '/datasets/TGT_data_target_ParamFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Pizza_Project_Member_loyality_prog_fact')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow  Member loyality prog fact",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Pizza_Project_Member_loyality_prog_fact",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StgMemberloyalty": {},
									"OrderDim": {},
									"CustomerDim": {},
									"LocationDim": {},
									"DateDataDim": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PizzaProject2024"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-02T22:13:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Pizza_Project_Member_loyality_prog_fact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Pizza_Project_SALES_FACT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Pizza Project Sales Fact",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Pizza_Project_SALES_FACT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"OrderLine": {},
									"Order": {},
									"Customer": {},
									"PaymentRef": {},
									"ChannelRef": {},
									"DeliveryTypeRef": {},
									"ProductToppingDim": {},
									"LocationDim": {},
									"ProductDim": {},
									"PromotionDim": {},
									"DateDataDim": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PizzaProject2024"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-02T19:51:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Pizza_Project_SALES_FACT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Pizza_Project_customer_review_fact')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Customer Review Fact",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Pizza_Project_customer_review_fact",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StgCustomerReview": {},
									"OrderDim": {},
									"CustomerDim": {},
									"LocationDim": {},
									"DateDataDim": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PizzaProject2024"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-02T22:52:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Pizza_Project_customer_review_fact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pi_df_PizzaProject_AnandSir_SCD3_HR_PROMOTION_DIM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PizzaProject_AnandSir_SCD3_HR_PROMOTION_DIM",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StgSTGPROMOTIONcsv": {},
									"HrPromotionDim": {},
									"Insertsink1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PizzaProject2024"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_PizzaProject_AnandSir_SCD3_HR_PROMOTION_DIM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pi_df_PizzaProject_LOCATION_DIM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PizzaProject_LOCATION_DIM_SCD2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STGSTORELOCATIONCSV": {},
									"STGSTATECOUNTRYcsv": {},
									"sourceHrLocationDim": {},
									"InsertLOCATIONDIM": {},
									"UpdateLOCATIONDIM": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PizzaProject2024"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_PizzaProject_LOCATION_DIM_SCD2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pi_df_PizzaProject_LOCATION_DIM_SCD2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PizzaProject_LOCATION_DIM_SCD2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STGSTORELOCATIONCSV": {},
									"STGSTATECOUNTRYcsv": {},
									"sourceHrLocationDim": {},
									"InsertLOCATIONDIM": {},
									"UpdateLOCATIONDIM": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PizzaProject2024"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_PizzaProject_LOCATION_DIM_SCD2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pi_df_PizzaProject_STG_PROMOTION')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_PizzaProject_STG_PROMOTION",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PizzaProject_STG_PROMOTION",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STGPROMOTIONcsv": {},
									"SqlServerStgPromotion": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PizzaProject2024"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_PizzaProject_STG_PROMOTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pi_df_Pizza_Project_CustomerDim_LALLOO')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Pizza_Project_CustomerDim_LALLOO",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CUSTOMERScsv": {},
									"CUSTOMERPPHONRNUMBERCSV": {},
									"STGCUSTOMEREMAILcsv": {},
									"STGHUTLOVERcsv": {},
									"STGCUSTOMERADDRESS": {},
									"dsSqlServerCustomerDim": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PizzaProject2024"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Pizza_Project_CustomerDim_LALLOO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pi_df_Pizza_Project_PRODUCT_DIM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Pizza_Project_PRODUCT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STGPRODUCTcsv": {},
									"STGPRODUCTSUBCATEGORYcsv": {},
									"STGPRODUCTCATEGORYcsv": {},
									"PRODUCT": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PizzaProject2024"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Pizza_Project_PRODUCT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pi_df_Pizza_Project_Product_Dim_SDC2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Pizza_Project_Product_Dim_SDC2_AnandSir",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceHrProduct": {},
									"sourceHrProductDim": {},
									"Updatesink2": {},
									"Insertsink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PizzaProject2024"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Pizza_Project_Product_Dim_SDC2_AnandSir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pi_df_Pizza_Project_Product_Dim_SDC2_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Pizza_Project_Product_Dim_SDC2_AnandSir",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceHrProduct": {},
									"sourceHrProductDim": {},
									"Updatesink2": {},
									"Insertsink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PizzaProject2024"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Pizza_Project_Product_Dim_SDC2_AnandSir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pi_df_Pizza_Project_Query_SCD3_HR_PROMOTION_DIM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_PizzaProject_Query_SCD3_HR_PROMOTION_DIM",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PizzaProject_Query_SCD3_HR_PROMOTION_DIM",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"InsertHrPromotionDim": {},
									"UpdateHrPromotionDim": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PizzaProject2024"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_PizzaProject_Query_SCD3_HR_PROMOTION_DIM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_ApendVariable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1 For Append Var",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable1 For Append Var_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Array2",
							"value": {
								"value": "@variables('Array1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Set variable1 For Append Var",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Array2",
							"value": {
								"value": "@int(5)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2 Foe Append Var",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Append variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Array1",
							"value": {
								"value": "@variables('Array2')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1 For Append Var_copy1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Array2",
							"value": {
								"value": "@variables('Array1')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Array1": {
						"type": "Array",
						"defaultValue": [
							1,
							2,
							3,
							4
						]
					},
					"Array2": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_ApendVariable_Clone')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1 For Append Var",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable1 For Append Var_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Array2",
							"value": {
								"value": "@variables('Array1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Set variable1 For Append Var",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Array2",
							"value": {
								"value": "@int(5)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2 Foe Append Var",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Append variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Array1",
							"value": {
								"value": "@variables('Array2')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1 For Append Var_copy1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Array2",
							"value": {
								"value": "@variables('Array1')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Array1": {
						"type": "Array",
						"defaultValue": [
							1,
							2,
							3,
							4
						]
					},
					"Array2": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Config_dataload_Setvar_CpActivity_Script')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Config",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from hr.config where activeflag = 1",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Oracle_HR_ParamTableName",
								"type": "DatasetReference",
								"parameters": {
									"SourceTableName": "countries"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Config",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Config').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Oracle_hr_param_Table",
											"type": "DatasetReference",
											"parameters": {
												"DTSourceTableName": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_data_DataFlow_ParamFileName",
											"type": "DatasetReference",
											"parameters": {
												"DTTargetFilename": {
													"value": "@item().targettable",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "StartDate",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Script1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LinkServiceOracle",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('update hr.config set startdate =  ''',variables('StartDate'),''' ,enddate = ''',utcNow(),''' ,status = ''success'' where sourcetable = ''',item().sourcetable,'''')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartDate": {
						"type": "String"
					},
					"sourcetable": {
						"type": "String"
					},
					"dummy": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle_HR_ParamTableName')]",
				"[concat(variables('factoryId'), '/datasets/Oracle_hr_param_Table')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_ParamFileName')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkServiceOracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Copy_OracleHR_to_OracleTGTHR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data OracleHR to OracleTGTHR",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "OracleSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Oracle_Param_Schema_Param_Table",
								"type": "DatasetReference",
								"parameters": {
									"SourceTableName": {
										"value": "@pipeline().parameters.PipeSouceTableName",
										"type": "Expression"
									},
									"SchemaName": "HR"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Oracle_HR_ParamTableName",
								"type": "DatasetReference",
								"parameters": {
									"SourceTableName": "countries"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipeSouceTableName": {
						"type": "string",
						"defaultValue": "EMPLOYEES"
					},
					"PipeTargetTableName": {
						"type": "string",
						"defaultValue": "TGT_EMPLOYEES"
					}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle_Param_Schema_Param_Table')]",
				"[concat(variables('factoryId'), '/datasets/Oracle_HR_ParamTableName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Copy_SRC_Sink_FileNameParameterize')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "NewSimpleCopyDataActivity",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SRC_data_source_Month_Of_11_as_November_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_data_target_ParamFileName",
								"type": "DatasetReference",
								"parameters": {
									"DSTargetFileName": {
										"value": "@pipeline().parameters.PipeTargetFilename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipeSourceFileName": {
						"type": "string",
						"defaultValue": "Month_Of_11 as _November.csv"
					},
					"PipeTargetFilename": {
						"type": "string",
						"defaultValue": "LALU.CSV"
					}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-08T16:55:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_data_source_Month_Of_11_as_November_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_target_ParamFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Copy_SRC_to_Archive_CopytoSink_DeleteSourceFF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyDataSourceToArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SRC_data_source_Month_Of_10_as_October_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TGT_ParamaFolder_ParamTargetFile",
								"type": "DatasetReference",
								"parameters": {
									"FileNameDataSetParamTarget": {
										"value": "@variables('FileNameVarTarget')",
										"type": "Expression"
									},
									"PathDataSetParamTargetFile": {
										"value": "@variables('PathVarTargetFile')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteSourceHrSchemaFiles",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_data_source_Month_Of_10_as_October_csv",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "MyNewLinkService",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "Jobs.csv",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "CopyDataSourceToArchive",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SRC_data_source_Month_Of_10_as_October_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TGT_ParamaFolder_ParamTargetFile",
								"type": "DatasetReference",
								"parameters": {
									"FileNameDataSetParamTarget": {
										"value": "@variables('FileNameVarTarget')",
										"type": "Expression"
									},
									"PathDataSetParamTargetFile": {
										"value": "@concat(utcNow())",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "CopyDataSourceToArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileNameVarTarget",
							"value": {
								"value": "@concat(concat('Archive_File_',utcNow()),'.csv')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"FileNameVarTarget": {
						"type": "String",
						"defaultValue": "Delete_Activity.csv"
					},
					"PathVarTargetFile": {
						"type": "String",
						"defaultValue": "target/Hr_Schema"
					}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_data_source_Month_Of_10_as_October_csv')]",
				"[concat(variables('factoryId'), '/datasets/TGT_ParamaFolder_ParamTargetFile')]",
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Execute_Copy_SRC_to_Archive_CopytoSink_DeleteSourceFF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pip_Copy_SRC_to_Archive_CopytoSink_DeleteSourceFF",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pip_Copy_SRC_to_Archive_CopytoSink_DeleteSourceFF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_ForEachPipeLineCopyActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "SRC_data_source_Dep_LppkUp_csv",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SRC_data_source_Dep_LppkUp_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TGT_data_target_ForEach_paramfilename",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@item().dept_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_data_source_Dep_LppkUp_csv')]",
				"[concat(variables('factoryId'), '/datasets/TGT_data_target_ForEach_paramfilename')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_OraclrHRtoADFTrgetHrSchema')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Oracle_HR_DB_to_ADF_Target_HrSchema",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "OracleSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Oracle_HR_ParamTableName",
								"type": "DatasetReference",
								"parameters": {
									"SourceTableName": {
										"value": "@pipeline().parameters.SourceTableName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Oracle_HR_ParamTableName",
								"type": "DatasetReference",
								"parameters": {
									"SourceTableName": "countries"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SourceTableName": {
						"type": "string"
					},
					"TargetTableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle_HR_ParamTableName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_PIZZAPROJECT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT * FROM HR.PIZZAPROJECT WHERE ACTIVEFLAG =1;\n\n",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Orcale_HR_PIZZAPROJECT",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().QUERY",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Oracle_HR_ParamTableName",
											"type": "DatasetReference",
											"parameters": {
												"SourceTableName": {
													"value": "@item().SOURCETABLE",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_pizza",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@concat(item().TARGETTABLE,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "StartDate",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Script1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LinkServiceOracle",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('update HR.PIZZAPROJECT set startdate =  ''',variables('StartDate'),''' ,enddate = ''',utcNow(),''' ,status = ''success'',source_row =',activity('Copy data1').output.rowsRead,',target_row = ' , activity('Copy data1').output.rowsCopied, ' where sourcetable = ''',item().sourcetable,'''')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PizzaProject2024"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Orcale_HR_PIZZAPROJECT')]",
				"[concat(variables('factoryId'), '/datasets/Oracle_HR_ParamTableName')]",
				"[concat(variables('factoryId'), '/datasets/ds_pizza')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkServiceOracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_SRC_Copy_SinkFileNameParameterize')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data SimpleCoptDataActivity",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "data/source/Month_Of_11 as _November.csv"
							},
							{
								"name": "Destination",
								"value": "data/target/@{'<DataSetParamFileName>'}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": true
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "MyNewLinkService",
										"type": "LinkedServiceReference"
									},
									"path": "logging"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "EMPLOYEE_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EMPLOYEE_ID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "FIRST_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FIRST_NAME",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "LAST_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LAST_NAME",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PHONE_NUMBER",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PHONE_NUMBER",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "JOB_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "JOB_ID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "SALARY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SALARY",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DEPARTMENT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEPARTMENT_ID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Month",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Month",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SRC_data_source_Month_Of_11_as_November_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TGT_data_target_ParamTargetFileName",
								"type": "DatasetReference",
								"parameters": {
									"DataSetParamFileName": {
										"value": "@pipeline().parameters.TargetFileName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TargetFileName": {
						"type": "string",
						"defaultValue": "lalloo.csv"
					}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-08T17:21:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_data_source_Month_Of_11_as_November_csv')]",
				"[concat(variables('factoryId'), '/datasets/TGT_data_target_ParamTargetFileName')]",
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Setvar1_AppendVariable_Setvar2_Setvar3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ArrayVar1",
							"value": {
								"value": "@variables('Arrayvar')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Append variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ArrayVar1",
							"value": {
								"value": "@variables('Arrayvar')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Arrayvar",
							"value": {
								"value": "@int(5)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable3",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "var3",
							"value": {
								"value": "@{variables('ArrayVar1')[0]}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Arrayvar": {
						"type": "Array",
						"defaultValue": [
							1,
							2,
							3,
							4
						]
					},
					"ArrayVar1": {
						"type": "Array"
					},
					"var3": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Simple_DataFlow_Departments_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflowSimpleOneToOne",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowSimpleOneToOne",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"departmentCsv": {},
									"DataFlowCsv": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowSimpleOneToOne')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_TestingDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CDC_TEST",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							},
							"continuationSettings": {
								"customizedCheckpointKey": "436d8de4-de53-4ebe-bc5d-6ffda231cf0d"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-07T17:21:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_CDC_TEST')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_TestingDataFlow_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CDC_TEST",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							},
							"continuationSettings": {
								"customizedCheckpointKey": "436d8de4-de53-4ebe-bc5d-6ffda231cf0d"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-08T01:55:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_CDC_TEST')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_dataloadStatusSuccessSourceRow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from hr.config where activeflag = 1",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Oracle_HR_ParamTableName",
								"type": "DatasetReference",
								"parameters": {
									"SourceTableName": "countries"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set variable2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Oracle_hr_param_Table",
											"type": "DatasetReference",
											"parameters": {
												"DTSourceTableName": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_data_DataFlow_ParamFileName",
											"type": "DatasetReference",
											"parameters": {
												"DTTargetFilename": {
													"value": "@item().targettable",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "StartDate",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Script1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LinkServiceOracle",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('update hr.config set startdate =  ''',variables('StartDate'),''' ,enddate = ''',utcNow(),''' ,status = ''success'',source_row =',activity('Copy data1').output.rowsRead,',target_row = ' , activity('Copy data1').output.rowsCopied, ' where sourcetable = ''',item().sourcetable,'''')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "source_row",
										"value": {
											"value": "@item().source_row",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartDate": {
						"type": "String"
					},
					"sourcetable": {
						"type": "String"
					},
					"dummy": {
						"type": "String"
					},
					"source_row": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle_HR_ParamTableName')]",
				"[concat(variables('factoryId'), '/datasets/Oracle_hr_param_Table')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_ParamFileName')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkServiceOracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_dataload_with_StatusSuccess')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from hr.config where activeflag = 1",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Oracle_HR_ParamTableName",
								"type": "DatasetReference",
								"parameters": {
									"SourceTableName": "countries"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Oracle_hr_param_Table",
											"type": "DatasetReference",
											"parameters": {
												"DTSourceTableName": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_data_DataFlow_ParamFileName",
											"type": "DatasetReference",
											"parameters": {
												"DTTargetFilename": {
													"value": "@item().targettable",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "StartDate",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Script1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LinkServiceOracle",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('update hr.config set startdate =  ''',variables('StartDate'),''' ,enddate = ''',utcNow(),''' ,status = ''success'' where sourcetable = ''',item().sourcetable,'''')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartDate": {
						"type": "String"
					},
					"sourcetable": {
						"type": "String"
					},
					"dummy": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle_HR_ParamTableName')]",
				"[concat(variables('factoryId'), '/datasets/Oracle_hr_param_Table')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_ParamFileName')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkServiceOracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_dataload_without_Status')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from hr.config where activeflag = 1",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Oracle_HR_ParamTableName",
								"type": "DatasetReference",
								"parameters": {
									"SourceTableName": "countries"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Oracle_hr_param_Table",
											"type": "DatasetReference",
											"parameters": {
												"DTSourceTableName": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_data_DataFlow_ParamFileName",
											"type": "DatasetReference",
											"parameters": {
												"DTTargetFilename": {
													"value": "@item().targettable",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "StartDate",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Script1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LinkServiceOracle",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('update hr.config set startdate =  ''',variables('StartDate'),''' where sourcetable = ''',item().sourcetable,'''')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartDate": {
						"type": "String"
					},
					"sourcetable": {
						"type": "String"
					},
					"dummy": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle_HR_ParamTableName')]",
				"[concat(variables('factoryId'), '/datasets/Oracle_hr_param_Table')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_ParamFileName')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkServiceOracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_AlterRow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_AlterRow_UPSERT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_AlterRow_UPSERT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_AlterRow_DELETE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_AlterRow_DELETE",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employeesnulldepcsv": {},
									"dboEMPDEPTNAME": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_AlterRow_DELETE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_Cast_Aggre_Sorter_SKkey_Rank')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_HrSchema",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_SelectCastAggregator",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcDataDataFlowEmployeesCsv": {},
									"DataDataFlowHrSchemaCsv": {
										"DTTargetFileName": "abcd.csv"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_SelectCastAggregator')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_Cast_Aggregator')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Agregate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {
										"DTTargetFilename": "TESTING.csv"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Agregate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_ConditionalSplit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ConditionalSplit",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_ConditionalSplit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_CrossJoin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CrossJoin",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_CrossJoin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_DepWiseSalLessThanAvgSal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DepWiseSalLessThanAvgSal",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_DepWiseSalLessThanAvgSal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_DerivedColumnPart2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DerivedColumnPart2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_DerivedColumnPart2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_SalaryIncrese')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_SalaryIncrese",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_SalaryIncrese')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_adls_TO_SqlServer_employees')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_adls_TO_SqlServer_employees",
								"type": "DataFlowReference",
								"parameters": {
									"TABLENAME": {
										"value": "'@{pipeline().parameters.TABLENAME}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"dsdataDataFlowemployeescsv": {},
									"SinkSqlServerEmployees": {
										"TableName": {
											"value": "@pipeline().parameters.TABLENAME",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TABLENAME": {
						"type": "string",
						"defaultValue": "EMPLOYEES"
					}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_adls_TO_SqlServer_employees')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_adls_to_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_adls_to_SqlServer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_adls_to_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_cast_Aggre_Join_Sort_Select_Analytical')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_SelectCastAnalytical",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcDataDataFlowEmployeesCsv": {},
									"DataDataFlowHrSchemaCsv": {
										"DTTargetFileName": "abcd.csv"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_SelectCastAnalytical')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_lead_lag_window_function')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Window_Function",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {
										"TARGETFILENAME": "targetfilename.csv"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Window_Function')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_lkp_Scr_SetVar_CpAct_Script_Script_Fail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from hr.config where activeflag = 0",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Oracle_HR_ParamTableName",
								"type": "DatasetReference",
								"parameters": {
									"SourceTableName": "countries"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Script3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Oracle_hr_param_Table",
											"type": "DatasetReference",
											"parameters": {
												"DTSourceTableName": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_data_DataFlow_ParamFileName",
											"type": "DatasetReference",
											"parameters": {
												"DTTargetFilename": {
													"value": "@item().targettable",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "StartDate",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Script1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LinkServiceOracle",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('update hr.config set startdate =  ''',variables('StartDate'),''' ,enddate = ''',utcNow(),''' ,status = ''success'' where sourcetable = ''',item().sourcetable,'''')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Script2",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LinkServiceOracle",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('update hr.config set status =''failed ''', 'where activeflag = 1 and status is null')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Script3",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LinkServiceOracle",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "update  hr.config set status = null where activeflag =1"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartDate": {
						"type": "String"
					},
					"sourcetable": {
						"type": "String"
					},
					"dummy": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle_HR_ParamTableName')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkServiceOracle')]",
				"[concat(variables('factoryId'), '/datasets/Oracle_hr_param_Table')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_ParamFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_lkpValue_ForEach_File_Creation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_Dep_LookUp",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "SRC_data_source_Dep_LppkUp_csv",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "lkp_ForEach_File_Creation",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_Dep_LookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_Dep_LookUp').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyData_lkp_ForEach_File_Creation",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SRC1_data_source_Month_Of_10_as_October_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TGT_data_target_ParamFileName",
											"type": "DatasetReference",
											"parameters": {
												"DataSetParamFileName": {
													"value": "@concat(item().dept_name,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_data_source_Dep_LppkUp_csv')]",
				"[concat(variables('factoryId'), '/datasets/SRC1_data_source_Month_Of_10_as_October_csv')]",
				"[concat(variables('factoryId'), '/datasets/TGT_data_target_ParamFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_lkpValue_ForEach_Folder_Creation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DepLookUp",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "SRC_data_source_Dep_LppkUp_csv",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "DepLookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('DepLookUp').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SRC_data_source_Dep_LppkUp_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TGT_data_target_ForEach_paramfilename",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@item().dept_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_data_source_Dep_LppkUp_csv')]",
				"[concat(variables('factoryId'), '/datasets/TGT_data_target_ForEach_paramfilename')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_lkp_Query_Values_ForEach_Setvar_Copyactivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupConfigDataset",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT * FROM CONFIG where activeflag = 1\n",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Oracle_HR_ParamTableName",
								"type": "DatasetReference",
								"parameters": {
									"SourceTableName": "countries"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachConfigDataset",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupConfigDataset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupConfigDataset').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data Config Dataset",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Oracle_hr_param_Table",
											"type": "DatasetReference",
											"parameters": {
												"DTSourceTableName": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_data_DataFlow_ParamFileName",
											"type": "DatasetReference",
											"parameters": {
												"DTTargetFilename": {
													"value": "@concat(concat(item().targettable,variables('STARTDATE'),'_.csv'))",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "STARTDATE",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"STARTDATE": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle_HR_ParamTableName')]",
				"[concat(variables('factoryId'), '/datasets/Oracle_hr_param_Table')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_ParamFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_lkp_Query_Values_SourceData_Sink_FileCreation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupNewConfiguration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT * FROM CONFIGURATION ",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Oracle_HR_ParamTableName",
								"type": "DatasetReference",
								"parameters": {
									"SourceTableName": "countries"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachNewConfiguration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupNewConfiguration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupNewConfiguration').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyDataForEachNewConfiguration",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Oracle_hr_param_Table",
											"type": "DatasetReference",
											"parameters": {
												"DTSourceTableName": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "TGT_data_target_Configuration_ParamFile",
											"type": "DatasetReference",
											"parameters": {
												"DT_TargetFileName": {
													"value": "@concat(item().TARETTABLE,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle_HR_ParamTableName')]",
				"[concat(variables('factoryId'), '/datasets/Oracle_hr_param_Table')]",
				"[concat(variables('factoryId'), '/datasets/TGT_data_target_Configuration_ParamFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_lkp_SingleValue_SinkFileCreation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "SRC_data_source_ADFtesting_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SRC_data_source_Month_Of_11_as_November_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_data_target_ParamFileName",
								"type": "DatasetReference",
								"parameters": {
									"DSTargetFileName": {
										"value": "@activity('Lookup1').output.firstRow.NAME",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_data_source_ADFtesting_csv')]",
				"[concat(variables('factoryId'), '/datasets/SRC_data_source_Month_Of_11_as_November_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_target_ParamFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_lkp_Value_ForEach_SinkFileCreation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "SRC_data_source_Dep_LppkUp_csv",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SRC_data_source_Month_Of_11_as_November_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TGT_data_target_ParamFileName",
											"type": "DatasetReference",
											"parameters": {
												"DataSetParamFileName": {
													"value": "@item().dept_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_data_source_Dep_LppkUp_csv')]",
				"[concat(variables('factoryId'), '/datasets/SRC_data_source_Month_Of_11_as_November_csv')]",
				"[concat(variables('factoryId'), '/datasets/TGT_data_target_ParamFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_lkp_value_CopyAll_Table_HR_to_ADLS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupCopyAllTableHRtoADLS",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select owner , TABLE_NAME from all_tables where OWNER = 'HR';\n\n",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Oracle_HR_ParamTableName",
								"type": "DatasetReference",
								"parameters": {
									"SourceTableName": "countries"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachCopyAllTableHRtoADLS",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupCopyAllTableHRtoADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupCopyAllTableHRtoADLS').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": {
													"value": "@concat(item().TABLE_NAME,'.csv')",
													"type": "Expression"
												}
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Oracle_Param_Schema_Param_Table",
											"type": "DatasetReference",
											"parameters": {
												"SourceTableName": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().OWNER",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "TGT_data_target_ParamFileName",
											"type": "DatasetReference",
											"parameters": {
												"DataSetParamFileName": "hr_all_tables.csv"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle_HR_ParamTableName')]",
				"[concat(variables('factoryId'), '/datasets/Oracle_Param_Schema_Param_Table')]",
				"[concat(variables('factoryId'), '/datasets/TGT_data_target_ParamFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipe_SwitchActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.pipeSwitchParam",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "output1",
									"activities": [
										{
											"name": "Copy data Case 1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "SRC_data_source_Month_Of_11_as_November_csv",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_data_RunTime_target_dataset_ParamFileName",
													"type": "DatasetReference",
													"parameters": {
														"FolderName": {
															"value": "@pipeline().parameters.pipeSwitchParam",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "output2",
									"activities": [
										{
											"name": "Copy data1_Case2",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "SRC_data_source_Month_Of_11_as_November_csv",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_data_RunTime_target_dataset_ParamFileName",
													"type": "DatasetReference",
													"parameters": {
														"FolderName": {
															"value": "@pipeline().parameters.pipeSwitchParam",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Copy data Default",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SRC_data_source_Month_Of_11_as_November_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_data_RunTime_target_dataset_ParamFileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": "Default"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pipeSwitchParam": {
						"type": "string",
						"defaultValue": "LALLOO.csv"
					}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-08T17:21:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_data_source_Month_Of_11_as_November_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_RunTime_target_dataset_ParamFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipe_df_Cast_Aggr_Sort_SkKey_Rank')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_SelectCastAggregator",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcDataDataFlowEmployeesCsv": {},
									"DataDataFlowHrSchemaCsv": {
										"DTTargetFileName": "abcd.csv"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlowRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T16:04:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_SelectCastAggregator')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Copy_Multiple_Files_adls_to_adls')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Multiple Files",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": "2024-11-18T13:27:59Z",
									"wildcardFolderPath": "LEARN",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "MyNewLinkService",
									"type": "LinkedServiceReference"
								},
								"path": "staging"
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adls_data_LEARN_SALES",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-08T16:12:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls_data_LEARN_SALES')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_output')]",
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SimpleCopyActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "data/DataFlow/departments.csv"
							},
							{
								"name": "Destination",
								"value": "output//Departments.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": true
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "MyNewLinkService",
										"type": "LinkedServiceReference"
									},
									"path": "logging"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DEPARTMENT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEPARTMENT_ID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DEPARTMENT_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEPARTMENT_NAME",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "MANAGER_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MANAGER_ID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "LOCATION_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LOCATION_ID",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_data_DataFlow_departments_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_RunTimeFolderCreation",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_departments_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_RunTimeFolderCreation')]",
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dynamicAddFileNameInSink')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "FileName",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "EMPLOYEE_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EMPLOYEE_ID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "FIRST_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FIRST_NAME",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "LAST_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LAST_NAME",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "HIRE_DATE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "HIRE_DATE",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "JOB_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "JOB_ID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "SALARY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SALARY",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DEPARTMENT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEPARTMENT_ID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DEPARTMENT_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEPARTMENT_NAME",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "CITY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CITY",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "STATE_PROVINCE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "STATE_PROVINCE",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "COUNTRY_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "COUNTRY_NAME",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "REGION_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "REGION_NAME",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "JOB_TITLE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "JOB_TITLE",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "MonthInMM",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MonthInMM",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "FileName",
											"type": "String"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_data_Employees_by_Month",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_data_merge",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_Employees_by_Month')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_merge')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sc1_pip_ds_DepartmentWiseEmp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data sc1DepartmentWiseEmp",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "FileName",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "EMPLOYEE_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EMPLOYEE_ID",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "FIRST_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FIRST_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LAST_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LAST_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EMAIL",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EMAIL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PHONE_NUMBER",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PHONE_NUMBER",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "JOB_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "JOB_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SALARY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SALARY",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "COMMISSION_PCT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "COMMISSION_PCT",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "MANAGER_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MANAGER_ID",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "DEPARTMENT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEPARTMENT_ID",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "DEPARTMENT_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEPARTMENT_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FileName",
											"type": "String"
										},
										"sink": {
											"name": "FILENAME",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_input_DepartmentWiseEmp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_output_DepartmentWise_merge",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PipeLineCopy"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-01T16:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_input_DepartmentWiseEmp')]",
				"[concat(variables('factoryId'), '/datasets/ds_output_DepartmentWise_merge')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTabl_Memember_loyality_prog_fact')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "member_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_dim_key",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "location_dim_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "date_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "order_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "total_points_earned",
						"type": "int",
						"precision": 10
					},
					{
						"name": "remaining_points",
						"type": "int",
						"precision": 10
					},
					{
						"name": "is_active",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "HR",
					"table": "member_loyality_prog_fact"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataBase"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "CUSTOMER_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataBase"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NAME",
						"type": "varchar"
					},
					{
						"name": "SALARY",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "HR",
					"table": "SCD1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableCDC_SRC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "HR",
					"table": "SRC_CDC"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableDateData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Date_Key",
						"type": "nvarchar"
					},
					{
						"name": "day_yyyy_mm_dd",
						"type": "nvarchar"
					},
					{
						"name": "day_us_mm_dd_yyyy",
						"type": "nvarchar"
					},
					{
						"name": "day_us_long",
						"type": "nvarchar"
					},
					{
						"name": "day_us_m_d_yy",
						"type": "nvarchar"
					},
					{
						"name": "week_short",
						"type": "nvarchar"
					},
					{
						"name": "week_number",
						"type": "nvarchar"
					},
					{
						"name": "week_long",
						"type": "nvarchar"
					},
					{
						"name": "month_in_quarter_number",
						"type": "nvarchar"
					},
					{
						"name": "month_in_year_short",
						"type": "nvarchar"
					},
					{
						"name": "month_in_year_long",
						"type": "nvarchar"
					},
					{
						"name": "week_wk_qtr_year",
						"type": "nvarchar"
					},
					{
						"name": "week_from_to",
						"type": "nvarchar"
					},
					{
						"name": "week_starting",
						"type": "nvarchar"
					},
					{
						"name": "week_wk_year_cont",
						"type": "nvarchar"
					},
					{
						"name": "week_wk_year",
						"type": "nvarchar"
					},
					{
						"name": "week_wk_qtr_year_cont",
						"type": "nvarchar"
					},
					{
						"name": "day_in_week_short",
						"type": "nvarchar"
					},
					{
						"name": "day_in_week_number",
						"type": "nvarchar"
					},
					{
						"name": "day_in_week_long",
						"type": "nvarchar"
					},
					{
						"name": "month_short",
						"type": "nvarchar"
					},
					{
						"name": "month_number",
						"type": "nvarchar"
					},
					{
						"name": "month_long",
						"type": "nvarchar"
					},
					{
						"name": "quarter_short_us",
						"type": "nvarchar"
					},
					{
						"name": "year",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "HR",
					"table": "date_data"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableDateDateDim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "DateDate_dim"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableHrLocationDim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataBase"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Location_Dim_Key",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "STORE_LOCATION_ID",
						"type": "nvarchar"
					},
					{
						"name": "STORE_NAME",
						"type": "nvarchar"
					},
					{
						"name": "STORE_ADDRESS",
						"type": "nvarchar"
					},
					{
						"name": "STORE_PHONE_NUMBER",
						"type": "nvarchar"
					},
					{
						"name": "STATE_COUNTRY",
						"type": "nvarchar"
					},
					{
						"name": "STORE_OPEN_TIME",
						"type": "nvarchar"
					},
					{
						"name": "STORE_CLOSE_TIME",
						"type": "nvarchar"
					},
					{
						"name": "STATE_NAME",
						"type": "nvarchar"
					},
					{
						"name": "CREATE_USER_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "HR",
					"table": "LOCATION_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableHrProductDimCopy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataBase"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SURR_PRODUCT_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PRODUCT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PRODUCT_NAME",
						"type": "varchar"
					},
					{
						"name": "PRODUCT_PRICE",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "IS_ACTIVE",
						"type": "varchar"
					},
					{
						"name": "PRODUCT_CATEGORY_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PRODUCT_CATEGORY_NAME",
						"type": "varchar"
					},
					{
						"name": "PRODUCT_SUBCATEGORY_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PRODUCT_SUBCATEGORY_NAME",
						"type": "varchar"
					},
					{
						"name": "PRODUCT_SIZE",
						"type": "varchar"
					},
					{
						"name": "PRODUCT_DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "EFF_START_DATE",
						"type": "date"
					},
					{
						"name": "EFF_END_DATE",
						"type": "date"
					},
					{
						"name": "FLAG",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CREATE_USER_DATE",
						"type": "date"
					},
					{
						"name": "MD5_CHECKSUM",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "HR",
					"table": "PRODUCT_DIM_COPY"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableHrPromotionDim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataBase"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PROMOTION_DIM_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PROMOTION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PROMOTION_NAME",
						"type": "varchar"
					},
					{
						"name": "PREVIOUS_PROMOTION_NAME",
						"type": "varchar"
					},
					{
						"name": "PROMOTION_TYPE",
						"type": "varchar"
					},
					{
						"name": "PREVIOUS_PROMOTION_TYPE",
						"type": "varchar"
					},
					{
						"name": "DISCOUNT_AMOUNT",
						"type": "varchar"
					},
					{
						"name": "PREVIOUS_DISCOUNT_AMOUNT",
						"type": "varchar"
					},
					{
						"name": "START_DATE",
						"type": "date"
					},
					{
						"name": "PREVIOUS_START_DATE",
						"type": "date"
					},
					{
						"name": "END_DATE",
						"type": "date"
					},
					{
						"name": "PREVIOUS_END_DATE",
						"type": "date"
					},
					{
						"name": "CREATE_USER_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "HR",
					"table": "PROMOTION_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableHrSalesFact')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "order_line_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "order_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_dim_key",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "payment_ref_key",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "channel_ref_key",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "delivery_type_ref_key",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "product_topping_dim_key",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "location_dim_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SURR_PRODUCT_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "promotion_dim_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "date_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "order_date",
						"type": "date"
					},
					{
						"name": "order_status",
						"type": "nvarchar"
					},
					{
						"name": "quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "unit_price",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "toping_price",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "promotion_amount",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "HR",
					"table": "SALES_FACT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableOrderLineDim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "orderline_dim"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableOrder_dim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "order_dim"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableProduct_Topping_Dim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Product_Topping_Dim_Key",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PRODUCT_TOPPING_ID",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "TOPPING_NAME",
						"type": "nvarchar"
					},
					{
						"name": "TOPING_PRICE",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "IS_ACTIVE",
						"type": "bit"
					},
					{
						"name": "EFFECTIVE_DATE",
						"type": "date"
					},
					{
						"name": "END_DATE",
						"type": "date"
					},
					{
						"name": "FLAG",
						"type": "varchar"
					},
					{
						"name": "USER_CREATE_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "HR",
					"table": "PRODUCT_TOPPINGS_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableRecreate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataBase"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "EMP_DEPT_NAME"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableSCD2TESTING')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataBase"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NAME",
						"type": "varchar"
					},
					{
						"name": "SALARY",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "FLAG",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "HR",
					"table": "SCD2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableStgPromotion')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataBase"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Promotion_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Promotion_Name",
						"type": "varchar"
					},
					{
						"name": "Promotion_Type",
						"type": "varchar"
					},
					{
						"name": "Discount_amount",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "START_DATE",
						"type": "date"
					},
					{
						"name": "END_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "HR",
					"table": "STG_PROMOTION"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableStg_customer_review')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "stg_customer_review"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableTGT_CDC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "HR",
					"table": "TGT_CDC"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_HR_PRODUCT_DIM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataBase"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SURR_PRODUCT_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PRODUCT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PRODUCT_NAME",
						"type": "varchar"
					},
					{
						"name": "PRODUCT_PRICE",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "IS_ACTIVE",
						"type": "varchar"
					},
					{
						"name": "PRODUCT_CATEGORY_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PRODUCT_CATEGORY_NAME",
						"type": "varchar"
					},
					{
						"name": "PRODUCT_SUBCATEGORY_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PRODUCT_SUBCATEGORY_NAME",
						"type": "varchar"
					},
					{
						"name": "PRODUCT_SIZE",
						"type": "varchar"
					},
					{
						"name": "PRODUCT_DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "EFF_START_DATE",
						"type": "date"
					},
					{
						"name": "EFF_END_DATE",
						"type": "date"
					},
					{
						"name": "FLAG",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CREATE_USER_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "HR",
					"table": "PRODUCT_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_HR_SCD2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataBase"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NAME",
						"type": "varchar"
					},
					{
						"name": "SALARY",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "HR",
					"table": "SCD2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_Param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "SCD1"
					}
				},
				"folder": {
					"name": "AzureDataBase"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTablehr_customer_review_fact')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_dim_key",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "location_dim_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "date_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "order_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "feedback",
						"type": "nvarchar"
					},
					{
						"name": "feedback_date",
						"type": "date"
					},
					{
						"name": "recomended",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "HR",
					"table": "customer_review_fact"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTablestg_member_loyalty')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "stg_member_loyalty"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/D_class2024SourceSale')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Sales_04252022.csv",
						"folderPath": "Source/Sales",
						"fileSystem": "class2024"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "Sales_1.csv"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "Sink",
						"fileSystem": "class2024"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_ORDER_LINES.csv",
						"folderPath": "DataFlow/PIZZAPROJECT",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ORDER_LINE_ID",
						"type": "String"
					},
					{
						"name": "UNIT_PRICE",
						"type": "String"
					},
					{
						"name": "QUANTITY",
						"type": "String"
					},
					{
						"name": "PROMOTION_AMOUNT",
						"type": "String"
					},
					{
						"name": "PROMOTION_ID",
						"type": "String"
					},
					{
						"name": "ORDER_ID",
						"type": "String"
					},
					{
						"name": "PRODUCT_ID",
						"type": "String"
					},
					{
						"name": "PRODUCT_TOPPING_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_ORDER.csv",
						"folderPath": "DataFlow/PIZZAPROJECT",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ORDER_ID",
						"type": "String"
					},
					{
						"name": "ORDER_DATE",
						"type": "String"
					},
					{
						"name": "ORDER_STATUS",
						"type": "String"
					},
					{
						"name": "TOTAL_AMOUNT",
						"type": "String"
					},
					{
						"name": "TOTAL_TAX",
						"type": "String"
					},
					{
						"name": "TIPS",
						"type": "String"
					},
					{
						"name": "TOTAL_QUANTITY",
						"type": "String"
					},
					{
						"name": "DELIVERY_ID",
						"type": "String"
					},
					{
						"name": "CHANNEL_ID",
						"type": "String"
					},
					{
						"name": "STORE_LOCATION_ID",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "PAYMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_MEMBER_LOYALTY.csv",
						"folderPath": "DataFlow/PIZZAPROJECT",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "MEMBER_ID",
						"type": "String"
					},
					{
						"name": "ORDER_DATE",
						"type": "String"
					},
					{
						"name": "INITIAL_POINTS_RECEIVED_DATE",
						"type": "String"
					},
					{
						"name": "INITIAL_REWARD_POINTS",
						"type": "String"
					},
					{
						"name": "LAST_EARNED_POINTS",
						"type": "String"
					},
					{
						"name": "TOTAL_POINTS_EARNED",
						"type": "String"
					},
					{
						"name": "REMAINING_POINTS",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					},
					{
						"name": "STORE_LOCATION_ID",
						"type": "String"
					},
					{
						"name": "ORDER_ID",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CUSTOMER_REVIEW.csv",
						"folderPath": "DataFlow/PIZZAPROJECT",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_REVIEW_ID",
						"type": "String"
					},
					{
						"name": "RATING_SCALE",
						"type": "String"
					},
					{
						"name": "FEEDBACK",
						"type": "String"
					},
					{
						"name": "FEEDBACK_DATE",
						"type": "String"
					},
					{
						"name": "RECOMENDED",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "ORDER_ID",
						"type": "String"
					},
					{
						"name": "STORE_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkServiceOracle",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OracleDataBase"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "EMP_DEPT_ADF"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkServiceOracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_HR_ParamTableName')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkServiceOracle",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceTableName": {
						"type": "string",
						"defaultValue": "countries"
					}
				},
				"folder": {
					"name": "OracleDataBase"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": {
						"value": "@dataset().SourceTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkServiceOracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_Hr_Config_Test1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkServiceOracle",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OracleDataBase"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "CONFIG_TEST1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkServiceOracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_Param_Schema_Param_Table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkServiceOracle",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceTableName": {
						"type": "string",
						"defaultValue": "Employees"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "HR"
					}
				},
				"folder": {
					"name": "OracleDataBase"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().SourceTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkServiceOracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_hr_param_Table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkServiceOracle",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DTSourceTableName": {
						"type": "string",
						"defaultValue": "EMPLOYEES"
					}
				},
				"folder": {
					"name": "OracleDataBase"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": {
						"value": "@dataset().DTSourceTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkServiceOracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orcale_HR_PIZZAPROJECT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkServiceOracle",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "PIZZAPROJECT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkServiceOracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC1_data_source_Month_Of_10_as_October_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Month_Of_10 as _October.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_data_PmSourcePath_PmFileNamet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DataSetSourcePath": {
						"type": "string",
						"defaultValue": "Sales"
					},
					"DataSetSourceFileName": {
						"type": "string",
						"defaultValue": "data_04282022.csv"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().DataSetSourceFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DataSetSourcePath",
							"type": "Expression"
						},
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "LOCATION_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_data_source_ADFtesting_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ADFtesting.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_data_source_Dep_LppkUp_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Dep_LookUp.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "deptid",
						"type": "String"
					},
					{
						"name": "dept_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_data_source_EmpNew_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "EmpNew.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_data_source_Month_Of_10_as_October_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Month_Of_10 as _October.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_data_source_Month_Of_11_as_November_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Month_Of_11 as _November.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_data_source_departments_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "department.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TGT1_data_target_ParamTargetFileName')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "New123.csv",
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "Month",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TGT_ParamaFolder_ParamTargetFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileNameDataSetParamTarget": {
						"type": "string",
						"defaultValue": "lalloo.csv"
					},
					"PathDataSetParamTargetFile": {
						"type": "string",
						"defaultValue": "Lal"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileNameDataSetParamTarget",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().PathDataSetParamTargetFile",
							"type": "Expression"
						},
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TGT_data_DataFlowNew_ParamFileName')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Newabc.csv",
						"folderPath": "DataFlowNew",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TGT_data_DataFlow_ParamFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DTTargetFileName": {
						"type": "string",
						"defaultValue": "abcd.csv"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().DTTargetFileName,'.csv')",
							"type": "Expression"
						},
						"folderPath": "DataFlow",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TGT_data_target')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "testing.csv",
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TGT_data_target_Configuration_ParamFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DT_TargetFileName": {
						"type": "string",
						"defaultValue": "departments.csv"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().DT_TargetFileName",
							"type": "Expression"
						},
						"folderPath": "target/CONFIGURATION",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TGT_data_target_DataFlow_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DataFlow.csv",
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TGT_data_target_ForEach_paramfilename')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "string",
						"defaultValue": "lalloo"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('target/ForEach/',dataset().foldername)",
							"type": "Expression"
						},
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "Month",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TGT_data_target_ParamFileName')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DataSetParamFileName": {
						"type": "string",
						"defaultValue": "hr_all_tables.csv"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().DataSetParamFileName",
							"type": "Expression"
						},
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "Month",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TGT_data_target_ParamTargetFileName')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DataSetParamFileName": {
						"type": "string",
						"defaultValue": "lala.csv"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().DataSetParamFileName",
							"type": "Expression"
						},
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "Month",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_class2024_Sink_prmFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tgtFileName": {
						"type": "string",
						"defaultValue": "test.csv"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().tgtFileName",
							"type": "Expression"
						},
						"folderPath": "Sink",
						"fileSystem": "class2024"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Customer",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Product_code",
						"type": "String"
					},
					{
						"name": "Price",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/d_Getmetadata2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "Sales_04252022.csv"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "Source/Sales",
						"fileSystem": "class2024"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_SQLSERVER_SCD1_FF_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SCD1_FF.csv",
						"folderPath": "SQLSERVER",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "NAME",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_target_AzureProject_Stg_CUSTOMERP_PHONR_NUMBER_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CUSTOMER_PHONE_NUMBER.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_PHONE_NUMBER_ID",
						"type": "String"
					},
					{
						"name": "CUSTOMER_PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "CUSTOMER_PHONE_TYPE",
						"type": "String"
					},
					{
						"name": "CUSTOMER_PHONE_STATUS",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_target_AzureProject_Stg_CUSTOMERS_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CUSTOMERS.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "CUSTOMER_FIRST_NAME",
						"type": "String"
					},
					{
						"name": "CUSTOMER_LAST_NAME",
						"type": "String"
					},
					{
						"name": "CUSTOMER_DOB",
						"type": "String"
					},
					{
						"name": "CUSTOMER_TYPE",
						"type": "String"
					},
					{
						"name": "IS_LOYAL",
						"type": "String"
					},
					{
						"name": "FIRST_PURCHASE_DATE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_target_AzureProject_Stg_STG_CHANNEL_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CHANNEL.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CHANNEL_ID",
						"type": "String"
					},
					{
						"name": "CHANNEL_TYPE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_target_AzureProject_Stg_STG_CUSTOMER_ADDRESS_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CUSTOMER_ADDRESS.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_ADDRESS_ID",
						"type": "String"
					},
					{
						"name": "ADDRESS_LANE1",
						"type": "String"
					},
					{
						"name": "ADDRESS_LANE_2",
						"type": "String"
					},
					{
						"name": "CITY_NAME",
						"type": "String"
					},
					{
						"name": "STATE_NAME",
						"type": "String"
					},
					{
						"name": "COUNTRY_NAME",
						"type": "String"
					},
					{
						"name": "ZIP_CODE",
						"type": "String"
					},
					{
						"name": "GATE_CODE",
						"type": "String"
					},
					{
						"name": "ADDRESS_TYPE",
						"type": "String"
					},
					{
						"name": "ADDRESS_STATUS",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_target_AzureProject_Stg_STG_CUSTOMER_EMAIL_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CUSTOMER_EMAIL.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_EMAIL_ID",
						"type": "String"
					},
					{
						"name": "CUSTOMER_EMAIL",
						"type": "String"
					},
					{
						"name": "CUSTOMER_EMAIL_TYPE",
						"type": "String"
					},
					{
						"name": "CUSTOMER_EMAIL_STATUS",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_target_AzureProject_Stg_STG_DELIVERY_METHOD_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_DELIVERY_METHOD.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DELIVERY_ID",
						"type": "String"
					},
					{
						"name": "DELIVERY_TYPE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_target_AzureProject_Stg_STG_HUT_LOVER_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_HUT_LOVER.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "HUT_LOVERS_ID",
						"type": "String"
					},
					{
						"name": "JOINING_DATE",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					},
					{
						"name": "MEMBER_ID",
						"type": "String"
					},
					{
						"name": "CUSTMOER_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_target_AzureProject_Stg_STG_PAYMENT_METHOD_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PAYMENT_METHOD.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PAYMENT_ID",
						"type": "String"
					},
					{
						"name": "PAYMENT_TYPE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_target_AzureProject_Stg_STG_PRODUCT_CATEGORY_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PRODUCT_CATEGORY.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PRODUCT_CATEGORY_ID",
						"type": "String"
					},
					{
						"name": "PRODUCT_CATEGORY_NAME",
						"type": "String"
					},
					{
						"name": "PRODUCT_CATEGORY_DESCRIPTION",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_target_AzureProject_Stg_STG_PRODUCT_SUB_CATEGORY_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PRODUCT_SUB_CATEGORY.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PRODUCT_SUBCATEGORY_ID",
						"type": "String"
					},
					{
						"name": "PRODUCT_SUBCATEGORY_NAME",
						"type": "String"
					},
					{
						"name": "PRODUCT_SIZE",
						"type": "String"
					},
					{
						"name": "PRODUCT_CATEGORY_ID",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_target_AzureProject_Stg_STG_PRODUCT_TOPPINGS_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PRODUCT_TOPPINGS.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PRODUCT_TOPPING_ID",
						"type": "String"
					},
					{
						"name": "TOPPING_NAME",
						"type": "String"
					},
					{
						"name": "TOPING_PRICE",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_target_AzureProject_Stg_STG_PRODUCT_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PRODUCT.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PRODUCT_ID",
						"type": "String"
					},
					{
						"name": "PRODUCT_NAME",
						"type": "String"
					},
					{
						"name": "PRODUCT_PRICE",
						"type": "String"
					},
					{
						"name": "PRODUCT_DESCRIPTION",
						"type": "String"
					},
					{
						"name": "CALORIES",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					},
					{
						"name": "PRODUCT_SUBCATEGORY_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_target_AzureProject_Stg_STG_STATE_COUNTRY_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_STATE_COUNTRY.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "STATE_COUNTRY_ID",
						"type": "String"
					},
					{
						"name": "STATE_NAME",
						"type": "String"
					},
					{
						"name": "STATE_ABBREVATION",
						"type": "String"
					},
					{
						"name": "STATE_COUNTRY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_target_AzureProject_Stg_STG_STORE_LOCATION_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_STORE_LOCATION.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "STORE_LOCATION_ID",
						"type": "String"
					},
					{
						"name": "STORE_NAME",
						"type": "String"
					},
					{
						"name": "STORE_ADDRESS",
						"type": "String"
					},
					{
						"name": "STORE_PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "STORE_OPEN_TIME",
						"type": "String"
					},
					{
						"name": "STORE_CLOSE_TIME",
						"type": "String"
					},
					{
						"name": "STATE_COUNTRY_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds1_data_DataFlow_employees_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "employees.csv",
						"folderPath": "DataFlow",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_CreteRunTime')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Dynamic.csv",
						"folderPath": "Dynamic",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Monday')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Monday.csv",
						"fileSystem": "Monday"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_PIZZAPROJECT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TargetFileName": {
						"type": "string",
						"defaultValue": "PizzaProject.csv"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().TargetFileName",
							"type": "Expression"
						},
						"fileSystem": "PIZZAPROJECT"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_PizzaProject_CHANNEL_REF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "CHANNEL_REF"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_PizzaProject_STG_DELIVERY_METHOD_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_DELIVERY_METHOD.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DELIVERY_ID",
						"type": "String"
					},
					{
						"name": "DELIVERY_TYPE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Project_STG_DELIVERY_METHOD_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_DELIVERY_METHOD.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DELIVERY_ID",
						"type": "String"
					},
					{
						"name": "DELIVERY_TYPE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_RunTimeFolderCreation')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Departments.csv",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SqlServer_CustomerDim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "CUSTOMER_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SqlServer_PizzaProject_DELIVERY_TYPE_REF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "DELIVERY_TYPE_REF"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SqlServer_PizzaProject_LOCATION_DIM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "LOCATION_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SqlServer_PizzaProject_PAYMENT_REF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "PAYMENT_REF"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SqlServer_PizzaProject_PRODUCT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "PRODUCT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SqlServer_PizzaProject_PRODUCT_TOPPINGS_DIM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "PRODUCT_TOPPINGS_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SqlServer_PizzaProject_PRODUCT_TOPPINGS_STG')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "PRODUCT_TOPPINGS_STG"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_data_LEARN_SALES')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Sales_04252022.csv",
						"folderPath": "LEARN/SALES",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Customer",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Product_code",
						"type": "String"
					},
					{
						"name": "Price",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "new.csv",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_calss2024_Source_CLASS_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"src_FileName": {
						"type": "string",
						"defaultValue": "CLASS.csv"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "CLASS.csv",
						"folderPath": "Source",
						"fileSystem": "class2024"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpId",
						"type": "String"
					},
					{
						"name": "Emp_Name",
						"type": "String"
					},
					{
						"name": "Emp_Salary",
						"type": "String"
					},
					{
						"name": "Emp_Dep",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_class2024_Sink_prmFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tgt_FileName": {
						"type": "string",
						"defaultValue": "cadac.csv"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().tgt_FileName",
							"type": "Expression"
						},
						"folderPath": "Sink",
						"fileSystem": "class2024"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_DF_employeesnulldep_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "employeesnulldep.csv",
						"folderPath": "DF",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_DataFlowNew_paramFileName')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "CrossJoin.csv",
						"folderPath": "DataFlowNew",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "Email_new",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "Ph_NumberWithCountryCode",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "SalaryGrade",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					},
					{
						"name": "REGION_NAME",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_DataFlow_ADF_HRSCHEMA_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ADF_HRSCHEMA.csv",
						"folderPath": "DataFlow",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					},
					{
						"name": "CITY",
						"type": "String"
					},
					{
						"name": "STATE_PROVINCE",
						"type": "String"
					},
					{
						"name": "COUNTRY_NAME",
						"type": "String"
					},
					{
						"name": "REGION_NAME",
						"type": "String"
					},
					{
						"name": "JOB_TITLE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_DataFlow_ParamFileName')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DTTargetFilename": {
						"type": "string",
						"defaultValue": "TESTING.csv"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().DTTargetFilename,'.csv')",
							"type": "Expression"
						},
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_DataFlow_departments_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "departments.csv",
						"folderPath": "DataFlow",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "LOCATION_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_DataFlow_departments_target_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "departments_target.csv",
						"folderPath": "DataFlow",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "LOCATION_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_DataFlow_employees_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "employees.csv",
						"folderPath": "DataFlow",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_Employee_by_month_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Month_Of_10_asOctober.csv",
						"folderPath": "Employees_by_Month",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					},
					{
						"name": "CITY",
						"type": "String"
					},
					{
						"name": "STATE_PROVINCE",
						"type": "String"
					},
					{
						"name": "COUNTRY_NAME",
						"type": "String"
					},
					{
						"name": "REGION_NAME",
						"type": "String"
					},
					{
						"name": "JOB_TITLE",
						"type": "String"
					},
					{
						"name": "MonthInMM",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_Employees_by_Month')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Month_Of_10_asOctober.csv",
						"folderPath": "Employees_by_Month",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					},
					{
						"name": "CITY",
						"type": "String"
					},
					{
						"name": "STATE_PROVINCE",
						"type": "String"
					},
					{
						"name": "COUNTRY_NAME",
						"type": "String"
					},
					{
						"name": "REGION_NAME",
						"type": "String"
					},
					{
						"name": "JOB_TITLE",
						"type": "String"
					},
					{
						"name": "MonthInMM",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_Regions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "TGT_TCT_REGION_Americas.csv",
						"folderPath": "Regions",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					},
					{
						"name": "CITY",
						"type": "String"
					},
					{
						"name": "STATE_PROVINCE",
						"type": "String"
					},
					{
						"name": "COUNTRY_NAME",
						"type": "String"
					},
					{
						"name": "REGION_NAME",
						"type": "String"
					},
					{
						"name": "JOB_TITLE",
						"type": "String"
					},
					{
						"name": "FILENAME",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_RunTime_target_dataset_ParamFileName')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string",
						"defaultValue": "Regions"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "TGT_TCT_REGION_Americas.csv",
						"folderPath": {
							"value": "@concat('target/',dataset().FolderName)",
							"type": "Expression"
						},
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "Month",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_SQLSERVER_SCD1_FF_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SCD1_FF.csv",
						"folderPath": "SQLSERVER",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "NAME",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_datafkow_adf_emp_lkp_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ADF_Emp_Lkp.csv",
						"folderPath": "DataFlow",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "DEP_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_dataflow_adf_dep_lkp_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ADF_DEP_LKP.csv",
						"folderPath": "DataFlow",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DEP_ID",
						"type": "String"
					},
					{
						"name": "DEP_NAME",
						"type": "String"
					},
					{
						"name": "LOCATION",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_dataflow_adf_lkp_dep_multi_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ADF_LKP_DEP_MULTI.csv",
						"folderPath": "DataFlow",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DEP_ID",
						"type": "String"
					},
					{
						"name": "DEP_NAME",
						"type": "String"
					},
					{
						"name": "LOCATION",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_dfnew_ParameterFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TARGETFILENAME": {
						"type": "string",
						"defaultValue": "targetfilename.csv"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().TARGETFILENAME,'.csv')",
							"type": "Expression"
						},
						"folderPath": "DFNEW",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_merge')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "employee.csv",
						"folderPath": "merge",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Sales_04252022.csv",
						"folderPath": "Sales",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Customer",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Product_code",
						"type": "String"
					},
					{
						"name": "Price",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_source_Empabcdef_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Empabcdef.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_source_HrSchema_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "HrSchema.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					},
					{
						"name": "CITY",
						"type": "String"
					},
					{
						"name": "STATE_PROVINCE",
						"type": "String"
					},
					{
						"name": "COUNTRY_NAME",
						"type": "String"
					},
					{
						"name": "REGION_NAME",
						"type": "String"
					},
					{
						"name": "JOB_TITLE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_taregt_Tgt_Dep_10_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Dep_10.csv",
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_taregt_Tgt_Dep_20_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Dep_Id_20.csv",
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_target_AzureProject_Stg_STG_PROMOTION_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PROMOTIONS.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PROMOTION_ID",
						"type": "String"
					},
					{
						"name": "PROMOTION_NAME",
						"type": "String"
					},
					{
						"name": "PROMOTION_TYPE",
						"type": "String"
					},
					{
						"name": "DISCOUNT_AMOUNT",
						"type": "String"
					},
					{
						"name": "START_DATE",
						"type": "String"
					},
					{
						"name": "END_DATE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_target_ParamFileName')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DSTargetFileName": {
						"type": "string",
						"defaultValue": "New.csv"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().DSTargetFileName",
							"type": "Expression"
						},
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMP_ID\tFIRST_NAME\tLAST_NAME\tEMP_SALARY\tDEP_ID\tDEPARTMENT_ID\tDEPARTMENT_NAME",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_target_ParamTaregtFileName')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "New1.csv",
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_input_DepartmentWiseEmp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "TGT_TCT_FF_DEPARTMENTNAME_Administration.csv",
						"folderPath": "DepartmentWiseEmp",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_output_DepartmentWise_merge')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Dep_Wise_Emp.csv",
						"folderPath": "DepartmentWise",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_output_Regions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "RegionsNew1.csv",
						"folderPath": "Regions",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_pizza')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyNewLinkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "TIME_DATA.csv"
					}
				},
				"folder": {
					"name": "AzureDataLakeGen2"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "PIZZA",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkServiceOracle')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('LinkServiceOracle_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MyNewLinkService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('MyNewLinkService_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('MyNewLinkService_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSimpleOneToOne')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SRC_data_source_departments_csv",
								"type": "DatasetReference"
							},
							"name": "departmentCsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TGT_data_target_DataFlow_csv",
								"type": "DatasetReference"
							},
							"name": "DataFlowCsv"
						}
					],
					"transformations": [
						{
							"name": "selectDepartmentIdDepartmentName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DEPARTMENT_ID as short,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as short,",
						"          LOCATION_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> departmentCsv",
						"departmentCsv select(mapColumn(",
						"          DEPARTMENT_ID,",
						"          LOCATION_ID,",
						"          DEPARTMENT_NAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectDepartmentIdDepartmentName",
						"selectDepartmentIdDepartmentName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DataFlow.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DataFlowCsv"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_data_source_departments_csv')]",
				"[concat(variables('factoryId'), '/datasets/TGT_data_target_DataFlow_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Agregate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_source_HrSchema_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_ParamFileName",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string,",
						"          CITY as string,",
						"          STATE_PROVINCE as string,",
						"          COUNTRY_NAME as string,",
						"          REGION_NAME as string,",
						"          JOB_TITLE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 cast(output(",
						"          EMPLOYEE_ID as integer '000',",
						"          SALARY as integer '000',",
						"          DEPARTMENT_ID as integer '000'",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 aggregate(groupBy(DEPARTMENT_ID),",
						"     SumOfSalDepWise = sum(SALARY),",
						"          AvgOfSalDepWise = round(avg(SALARY)),",
						"          MinOfSalDepWise = round(min(SALARY)),",
						"          MaxOfSalDepWise = round(max(SALARY)),",
						"          CountDistEmpDepWise = countDistinct(EMPLOYEE_ID)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['HrSchemDepSumSal.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_source_HrSchema_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_ParamFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Agregate_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_employees_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_ParamFileName",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "sort2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 cast(output(",
						"          EMPLOYEE_ID as short,",
						"          SALARY as string,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 select(mapColumn(",
						"          SALARY,",
						"          DEPARTMENT_ID",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"sort2, cast1 join(select1@DEPARTMENT_ID == cast1@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"select1 sort(asc(DEPARTMENT_ID, true),",
						"     desc(SALARY, true)) ~> sort2",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['HrSchemDepSumSal.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_employees_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_ParamFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_AlterRow_DELETE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_DF_employeesnulldep_csv",
								"type": "DatasetReference"
							},
							"name": "employeesnulldepcsv"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableRecreate",
								"type": "DatasetReference"
							},
							"name": "dboEMPDEPTNAME"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableRecreate",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeesnulldepcsv",
						"source(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as date,",
						"          JOB_ID as string,",
						"          SALARY as decimal(10,2),",
						"          COMMISSION_PCT as decimal(5,2),",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as integer,",
						"          DEPARTMENT_NAME as string,",
						"          Filename as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dboEMPDEPTNAME",
						"employeesnulldepcsv cast(output(",
						"          EMPLOYEE_ID as integer,",
						"          SALARY as decimal(10,2),",
						"          COMMISSION_PCT as decimal(5,2),",
						"          MANAGER_ID as integer,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"join1 alterRow(deleteIf(isNull(cast1@EMPLOYEE_ID))) ~> alterRow1",
						"cast1, dboEMPDEPTNAME join(cast1@EMPLOYEE_ID == dboEMPDEPTNAME@EMPLOYEE_ID,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['EMPLOYEE_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EMPLOYEE_ID = dboEMPDEPTNAME@EMPLOYEE_ID,",
						"          FIRST_NAME = employeesnulldepcsv@FIRST_NAME,",
						"          LAST_NAME = employeesnulldepcsv@LAST_NAME,",
						"          EMAIL = employeesnulldepcsv@EMAIL,",
						"          PHONE_NUMBER = employeesnulldepcsv@PHONE_NUMBER,",
						"          HIRE_DATE = employeesnulldepcsv@HIRE_DATE,",
						"          JOB_ID = employeesnulldepcsv@JOB_ID,",
						"          SALARY = cast1@SALARY,",
						"          COMMISSION_PCT = cast1@COMMISSION_PCT,",
						"          MANAGER_ID = cast1@MANAGER_ID,",
						"          DEPARTMENT_ID = cast1@DEPARTMENT_ID,",
						"          EMPLOYEE_ID = dboEMPDEPTNAME@EMPLOYEE_ID,",
						"          FIRST_NAME = dboEMPDEPTNAME@FIRST_NAME,",
						"          LAST_NAME = dboEMPDEPTNAME@LAST_NAME,",
						"          EMAIL = dboEMPDEPTNAME@EMAIL,",
						"          PHONE_NUMBER = dboEMPDEPTNAME@PHONE_NUMBER,",
						"          HIRE_DATE = dboEMPDEPTNAME@HIRE_DATE,",
						"          JOB_ID = dboEMPDEPTNAME@JOB_ID,",
						"          SALARY = dboEMPDEPTNAME@SALARY,",
						"          COMMISSION_PCT = dboEMPDEPTNAME@COMMISSION_PCT,",
						"          MANAGER_ID = dboEMPDEPTNAME@MANAGER_ID,",
						"          DEPARTMENT_ID = dboEMPDEPTNAME@DEPARTMENT_ID,",
						"          DEPARTMENT_NAME,",
						"          Filename",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_DF_employeesnulldep_csv')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableRecreate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_AlterRow_Departments')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_departments_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_departments_target_csv",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_Param",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DEPARTMENT_ID as short,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as short,",
						"          LOCATION_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          DEPARTMENT_ID as short,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as short,",
						"          LOCATION_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 lookup(source1@DEPARTMENT_ID == source2@DEPARTMENT_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 alterRow(insertIf(iif(source1@DEPARTMENT_ID!=source2@DEPARTMENT_ID,true(),false()))) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_departments_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_departments_target_csv')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_Param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_AlterRow_UPSERT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds1_data_DataFlow_employees_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_departments_csv",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableRecreate",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "cast1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          DEPARTMENT_ID as integer,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as integer,",
						"          LOCATION_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"select1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"source1 cast(output(",
						"          EMPLOYEE_ID as integer,",
						"          SALARY as decimal(10,2),",
						"          COMMISSION_PCT as decimal(5,2),",
						"          MANAGER_ID as integer,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1, source2 join(cast1@DEPARTMENT_ID == source2@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID = cast1@MANAGER_ID,",
						"          DEPARTMENT_ID = cast1@DEPARTMENT_ID,",
						"          DEPARTMENT_NAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['EMPLOYEE_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID,",
						"          department_name = DEPARTMENT_NAME",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds1_data_DataFlow_employees_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_departments_csv')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableRecreate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CDC_TEST')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableCDC_SRC",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableTGT_CDC",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     enableNativeCdc: true,",
						"     netChanges: true,",
						"     skipInitialLoad: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          name as string",
						"     ),",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCDC_SRC')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableTGT_CDC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ConditionalSplit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds1_data_DataFlow_employees_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_data_taregt_Tgt_Dep_10_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_data_taregt_Tgt_Dep_20_csv",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "TGT_data_target",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 split(DEPARTMENT_ID==50,",
						"     DEPARTMENT_ID==80,",
						"     disjoint: false) ~> split1@(Dep50, Dep80, default)",
						"split1@Dep50 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dep_50.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"split1@Dep80 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dep_80.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"split1@default sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Default.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds1_data_DataFlow_employees_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_taregt_Tgt_Dep_10_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_taregt_Tgt_Dep_20_csv')]",
				"[concat(variables('factoryId'), '/datasets/TGT_data_target')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CrossJoin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_employees_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_departments_csv",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlowNew_paramFileName",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          DEPARTMENT_ID as short,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as short,",
						"          LOCATION_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 join(EMPLOYEE_ID==100,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID = source1@MANAGER_ID,",
						"          DEPARTMENT_ID = source1@DEPARTMENT_ID,",
						"          DEPARTMENT_ID = source2@DEPARTMENT_ID,",
						"          DEPARTMENT_NAME,",
						"          MANAGER_ID = source2@MANAGER_ID,",
						"          LOCATION_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          EMAIL as string,",
						"          Email_new as string,",
						"          PHONE_NUMBER as string,",
						"          Ph_NumberWithCountryCode as string,",
						"          SALARY as string,",
						"          SalaryGrade as string,",
						"          DEPARTMENT_NAME as string,",
						"          REGION_NAME as string",
						"     ),",
						"     partitionFileNames:['CrossJoin.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_employees_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_departments_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlowNew_paramFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DepWiseSalLessThanAvgSal')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_employees_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TGT_data_target_DataFlow_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 cast(output(",
						"          EMPLOYEE_ID as integer,",
						"          SALARY as decimal(10,0),",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 aggregate(groupBy(DEPARTMENT_ID),",
						"     Avg_Sal = round(avg(SALARY))) ~> aggregate1",
						"select1 filter(SALARY<Avg_Sal) ~> filter1",
						"aggregate1, cast1 join(aggregate1@DEPARTMENT_ID == cast1@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          DEPARTMENT_ID = aggregate1@DEPARTMENT_ID,",
						"          SALARY,",
						"          Avg_Sal,",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DepWiseSalLessThanAvgSal.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_employees_csv')]",
				"[concat(variables('factoryId'), '/datasets/TGT_data_target_DataFlow_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DerivedColumnPart2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_ADF_HRSCHEMA_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TGT_data_DataFlowNew_ParamFileName",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          DEPARTMENT_ID as short,",
						"          DEPARTMENT_NAME as string,",
						"          CITY as string,",
						"          STATE_PROVINCE as string,",
						"          COUNTRY_NAME as string,",
						"          REGION_NAME as string,",
						"          JOB_TITLE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"select1 derive(Ph_NumberWithCountryCode = iif(REGION_NAME == 'Americas', concat('+1', replace(PHONE_NUMBER,'.','')), concat('+44', replace(PHONE_NUMBER,'.',''))),",
						"          SalaryGrade = iif(SALARY > 10000 , 'Very Good', iif(SALARY >=7000 && SALARY <= 10000 ,'Good',iif(SALARY >7000 && SALARY <= 3000, 'Low','Very Low'))),",
						"          Email_new = iif(DEPARTMENT_NAME == 'IT', concat(EMAIL, '@gmail.com'), iif(DEPARTMENT_NAME == 'Sales', concat(EMAIL,'@yahoo.com'),concat(EMAIL,'@unknown.com'))),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"source1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          PHONE_NUMBER,",
						"          SALARY,",
						"          EMAIL,",
						"          DEPARTMENT_NAME,",
						"          REGION_NAME",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          EMAIL,",
						"          Email_new,",
						"          PHONE_NUMBER,",
						"          Ph_NumberWithCountryCode,",
						"          SALARY,",
						"          SalaryGrade,",
						"          DEPARTMENT_NAME,",
						"          REGION_NAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['TGT_HRSCHEMA_PhCounrtyCode.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_ADF_HRSCHEMA_csv')]",
				"[concat(variables('factoryId'), '/datasets/TGT_data_DataFlowNew_ParamFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DerrivedColumnSalGrade')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds1_data_DataFlow_employees_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_data_target_ParamTaregtFileName",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as decimal(10,2),",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(CountryCode = '+1',",
						"          Phone_Number_with_ContryCode = concat('+1',PHONE_NUMBER),",
						"          Ph_NumberWithCode = concat('+1',replace(PHONE_NUMBER, '.', '')),",
						"          SalaryGrade = iif(SALARY>10000, 'VERY GOOD ',iif(SALARY >= 8000 && SALARY <=10000,'GOOD',iif(SALARY < 8000 , 'LOW', 'NA'))),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DerriveColumn.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds1_data_DataFlow_employees_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_target_ParamTaregtFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_EmpDeptJoin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_employees_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_departments_csv",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TGT1_data_target_ParamTargetFileName",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          DEPARTMENT_ID as short,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as short,",
						"          LOCATION_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 join(source1@DEPARTMENT_ID == source2@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID = source1@MANAGER_ID,",
						"          DEPARTMENT_ID = source1@DEPARTMENT_ID,",
						"          DEPARTMENT_NAME,",
						"          LOCATION_ID",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string,",
						"          Month as string",
						"     ),",
						"     partitionFileNames:['EmpDepJoin.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_employees_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_departments_csv')]",
				"[concat(variables('factoryId'), '/datasets/TGT1_data_target_ParamTargetFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Lookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_employees_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_departments_csv",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_ParamFileName",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "MyNewLinkService",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          DEPARTMENT_ID as short,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as short,",
						"          LOCATION_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 lookup(source1@DEPARTMENT_ID == source2@DEPARTMENT_ID,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(LOCATION_ID, true),",
						"     broadcast: 'auto')~> lookup1",
						"source2 filter(DEPARTMENT_ID==90) ~> filter1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['LookupMatch.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_employees_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_departments_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_ParamFileName')]",
				"[concat(variables('factoryId'), '/linkedServices/MyNewLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Lookup_MatchMulti')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_datafkow_adf_emp_lkp_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_data_dataflow_adf_lkp_dep_multi_csv",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_ParamFileName",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as string,",
						"          DEP_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          DEP_ID as string,",
						"          DEP_NAME as string,",
						"          LOCATION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 lookup(source1@DEP_ID == source2@DEP_ID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EMP_DEP_LKP.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_datafkow_adf_emp_lkp_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_dataflow_adf_lkp_dep_multi_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_ParamFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_MemberLoyalty_stg')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText4",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTablestg_member_loyalty",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          MEMBER_ID as integer,",
						"          ORDER_DATE as date 'yyyy-MM-dd',",
						"          INITIAL_POINTS_RECEIVED_DATE as date 'yyyy-MM-dd',",
						"          INITIAL_REWARD_POINTS as integer,",
						"          LAST_EARNED_POINTS as integer,",
						"          TOTAL_POINTS_EARNED as integer,",
						"          REMAINING_POINTS as integer,",
						"          IS_ACTIVE as string,",
						"          STORE_LOCATION_ID as integer,",
						"          ORDER_ID as integer,",
						"          CUSTOMER_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText4')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablestg_member_loyalty')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Order_Dim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrder_dim",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATE as date 'yyyy-MM-dd',",
						"          ORDER_STATUS as string,",
						"          TOTAL_AMOUNT as string,",
						"          TOTAL_TAX as string,",
						"          TIPS as double,",
						"          TOTAL_QUANTITY as short,",
						"          DELIVERY_ID as short,",
						"          CHANNEL_ID as short,",
						"          STORE_LOCATION_ID as short,",
						"          CUSTOMER_ID as short,",
						"          PAYMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 cast(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATE as date 'yyyy-MM-dd',",
						"          ORDER_STATUS as string,",
						"          TOTAL_AMOUNT as decimal(5,2),",
						"          TOTAL_TAX as decimal(5,2),",
						"          TIPS as decimal(5,2),",
						"          TOTAL_QUANTITY as integer,",
						"          DELIVERY_ID as integer,",
						"          CHANNEL_ID as integer,",
						"          STORE_LOCATION_ID as integer,",
						"          CUSTOMER_ID as integer,",
						"          PAYMENT_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText3')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrder_dim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Pivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_employees_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Monday",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 pivot(groupBy(DEPARTMENT_ID),",
						"     pivotBy(JOB_ID),",
						"     CountOfJobId = count(JOB_ID),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Pivot.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_employees_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_Monday')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PizzaProjectQuerySCD3_HR_PROMOTION_DIM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableStgPromotion",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrPromotionDim",
								"type": "DatasetReference"
							},
							"name": "InsertHrPromotionDim"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrPromotionDim",
								"type": "DatasetReference"
							},
							"name": "UpdateHrPromotionDim"
						}
					],
					"transformations": [
						{
							"name": "filterUpdate"
						},
						{
							"name": "filterInsert"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SRC_PROMOTION_ID as integer,",
						"          SRC_PROMOTION_NAME as string,",
						"          SRC_PROMOTION_TYPE as string,",
						"          SRC_DISCOUNT_AMOUNT as string,",
						"          SRC_START_DATE as date,",
						"          SRC_END_DATE as date,",
						"          TGT_PROMOTION_DIM_KEY as integer,",
						"          TGT_PROMOTION_ID as integer,",
						"          TGT_PROMOTION_NAME as string,",
						"          TGT_PREVIOUS_PROMOTION_NAME as string,",
						"          TGT_PROMOTION_TYPE as string,",
						"          TGT_PREVIOUS_PROMOTION_TYPE as string,",
						"          TGT_PREVIOUS_DISCOUNT_AMOUNT as string,",
						"          TGT_START_DATE as date,",
						"          TGT_PREVIOUS_START_DATE as date,",
						"          TGT_END_DATE as date,",
						"          TGT_PREVIOUS_END_DATE as date,",
						"          TGT_CREATE_USER_DATE as date,",
						"          FLAG_UPDATE as string,",
						"          FLAG_INSERT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '\\r\\nSELECT                \\r\\nP1.PROMOTION_ID     AS SRC_PROMOTION_ID ,\\r\\nP1.PROMOTION_NAME     AS SRC_PROMOTION_NAME,\\r\\nP1.PROMOTION_TYPE     AS SRC_PROMOTION_TYPE,\\r\\nP1.DISCOUNT_AMOUNT     AS SRC_DISCOUNT_AMOUNT,\\r\\nP1.START_DATE     AS SRC_START_DATE,\\r\\nP1.END_DATE    AS SRC_END_DATE,\\r\\nP2.PROMOTION_DIM_KEY AS TGT_PROMOTION_DIM_KEY ,     \\r\\nP2.PROMOTION_ID     AS TGT_PROMOTION_ID ,\\r\\nP2.PROMOTION_NAME     AS TGT_PROMOTION_NAME,\\r\\nP2.PREVIOUS_PROMOTION_NAME     AS TGT_PREVIOUS_PROMOTION_NAME ,\\r\\nP2.PROMOTION_TYPE AS TGT_PROMOTION_TYPE,\\r\\nP2.PREVIOUS_PROMOTION_TYPE      AS TGT_PREVIOUS_PROMOTION_TYPE ,\\r\\nP2.PREVIOUS_DISCOUNT_AMOUNT     AS TGT_PREVIOUS_DISCOUNT_AMOUNT     ,\\r\\nP2.START_DATE     AS TGT_START_DATE     ,\\r\\nP2.PREVIOUS_START_DATE     AS TGT_PREVIOUS_START_DATE,\\r\\nP2.END_DATE     AS TGT_END_DATE ,\\r\\nP2.PREVIOUS_END_DATE     AS TGT_PREVIOUS_END_DATE,\\r\\nP2.CREATE_USER_DATE AS TGT_CREATE_USER_DATE,\\r\\nCASE WHEN P2.PROMOTION_ID IS NOT NULL AND (P1.PROMOTION_NAME <> P2.PROMOTION_NAME OR  P1.PROMOTION_TYPE <> P2.PROMOTION_TYPE \\r\\nOR P1.DISCOUNT_AMOUNT <> P2.DISCOUNT_AMOUNT\\r\\n)THEN \\'U\\' ELSE \\'N\\' END FLAG_UPDATE,\\r\\nCASE WHEN P2.PROMOTION_ID IS  NULL THEN \\'I\\' ELSE \\'N\\' END FLAG_INSERT\\r\\nFROM HR.STG_PROMOTION P1\\r\\nLEFT JOIN HR.PROMOTION_DIM P2\\r\\nON P1.PROMOTION_ID = P2.PROMOTION_ID',",
						"     format: 'query') ~> source1",
						"source1 filter(FLAG_UPDATE == 'U') ~> filterUpdate",
						"source1 filter(FLAG_INSERT == 'I') ~> filterInsert",
						"filterUpdate alterRow(updateIf(1==1)) ~> alterRow1",
						"filterInsert derive(o_Create_user_date = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as string,",
						"          PREVIOUS_DISCOUNT_AMOUNT as string,",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PROMOTION_ID = SRC_PROMOTION_ID,",
						"          PROMOTION_NAME = SRC_PROMOTION_NAME,",
						"          PROMOTION_TYPE = SRC_PROMOTION_TYPE,",
						"          DISCOUNT_AMOUNT = SRC_DISCOUNT_AMOUNT,",
						"          START_DATE = SRC_START_DATE,",
						"          END_DATE = SRC_END_DATE,",
						"          CREATE_USER_DATE = o_Create_user_date",
						"     )) ~> InsertHrPromotionDim",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as string,",
						"          PREVIOUS_DISCOUNT_AMOUNT as string,",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['PROMOTION_DIM_KEY'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PROMOTION_DIM_KEY = TGT_PROMOTION_DIM_KEY,",
						"          PREVIOUS_PROMOTION_NAME = SRC_PROMOTION_NAME,",
						"          PREVIOUS_PROMOTION_TYPE = SRC_PROMOTION_TYPE,",
						"          PREVIOUS_DISCOUNT_AMOUNT = SRC_DISCOUNT_AMOUNT,",
						"          PREVIOUS_START_DATE = SRC_START_DATE,",
						"          PREVIOUS_END_DATE = SRC_END_DATE,",
						"          CREATE_USER_DATE = TGT_CREATE_USER_DATE",
						"     )) ~> UpdateHrPromotionDim"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableStgPromotion')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHrPromotionDim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PizzaProject_ PRODUCT_TOPPINGS_STG')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_STG_PRODUCT_TOPPINGS_csv",
								"type": "DatasetReference"
							},
							"name": "STGPRODUCTTOPPINGScsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_SqlServer_PizzaProject_PRODUCT_TOPPINGS_STG",
								"type": "DatasetReference"
							},
							"name": "PRODUCTTOPPINGSDIM"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnCreateUserUpadateDate"
						},
						{
							"name": "SurrogateKeyProductToppingDimKey"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_TOPPING_ID as short,",
						"          TOPPING_NAME as string,",
						"          TOPING_PRICE as string,",
						"          IS_ACTIVE as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGPRODUCTTOPPINGScsv",
						"STGPRODUCTTOPPINGScsv derive(CREATE_USER_DATE = currentUTC(),",
						"          {o_Tooping_Price } = toDecimal(replace(TOPING_PRICE, '$', ''))) ~> derivedColumnCreateUserUpadateDate",
						"derivedColumnCreateUserUpadateDate keyGenerate(output(Product_Topping_Dim_Key as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> SurrogateKeyProductToppingDimKey",
						"SurrogateKeyProductToppingDimKey select(mapColumn(",
						"          Product_Topping_Dim_Key,",
						"          PRODUCT_TOPPING_ID,",
						"          TOPPING_NAME,",
						"          TOPING_PRICE = {o_Tooping_Price },",
						"          IS_ACTIVE,",
						"          CREATE_DATE = CREATE_USER_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> PRODUCTTOPPINGSDIM"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_STG_PRODUCT_TOPPINGS_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_PizzaProject_PRODUCT_TOPPINGS_STG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PizzaProject_ PRODUCT_TOPPINGS_dim_SCD2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_SqlServer_PizzaProject_PRODUCT_TOPPINGS_STG",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableProduct_Topping_Dim",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableProduct_Topping_Dim",
								"type": "DatasetReference"
							},
							"name": "sinkUpdate"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableProduct_Topping_Dim",
								"type": "DatasetReference"
							},
							"name": "sinkInsert"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filterInsert"
						},
						{
							"name": "filterUpdate"
						},
						{
							"name": "alterRowUpdate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Product_Topping_Dim_Key as long,",
						"          PRODUCT_TOPPING_ID as short,",
						"          TOPPING_NAME as string,",
						"          TOPING_PRICE as decimal(10,2),",
						"          IS_ACTIVE as boolean,",
						"          CREATE_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          Product_Topping_Dim_Key as long,",
						"          PRODUCT_TOPPING_ID as integer,",
						"          TOPPING_NAME as string,",
						"          TOPING_PRICE as decimal(10,2),",
						"          IS_ACTIVE as boolean,",
						"          EFFECTIVE_DATE as date,",
						"          END_DATE as date,",
						"          FLAG as string,",
						"          USER_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1, source2 lookup(source1@PRODUCT_TOPPING_ID == source2@PRODUCT_TOPPING_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(o_Effeective_Date = currentDate(),",
						"          o_END_DATE = currentDate(),",
						"          Active_Flag = 'Y',",
						"          InActive_Flag = 'N',",
						"          o_Create_User_date = currentDate(),",
						"          src_MD5 = md5(concat(toString(source1@TOPING_PRICE), source1@TOPPING_NAME)),",
						"          tgt_MD5 = md5(concat(toString(source2@TOPING_PRICE), source2@TOPPING_NAME))) ~> derivedColumn1",
						"derivedColumn1 filter(isNull(source2@PRODUCT_TOPPING_ID) || src_MD5 != tgt_MD5) ~> filterInsert",
						"derivedColumn1 filter(!isNull(source2@PRODUCT_TOPPING_ID) && src_MD5 != tgt_MD5) ~> filterUpdate",
						"filterUpdate alterRow(updateIf(1==1)) ~> alterRowUpdate",
						"alterRowUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Product_Topping_Dim_Key as long,",
						"          PRODUCT_TOPPING_ID as integer,",
						"          TOPPING_NAME as string,",
						"          TOPING_PRICE as decimal(10,2),",
						"          IS_ACTIVE as boolean,",
						"          EFFECTIVE_DATE as date,",
						"          END_DATE as date,",
						"          FLAG as string,",
						"          USER_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Product_Topping_Dim_Key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product_Topping_Dim_Key = source1@Product_Topping_Dim_Key,",
						"          END_DATE = o_END_DATE,",
						"          FLAG = InActive_Flag",
						"     )) ~> sinkUpdate",
						"filterInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Product_Topping_Dim_Key as long,",
						"          PRODUCT_TOPPING_ID as integer,",
						"          TOPPING_NAME as string,",
						"          TOPING_PRICE as decimal(10,2),",
						"          IS_ACTIVE as boolean,",
						"          EFFECTIVE_DATE as date,",
						"          END_DATE as date,",
						"          FLAG as string,",
						"          USER_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product_Topping_Dim_Key = source1@Product_Topping_Dim_Key,",
						"          PRODUCT_TOPPING_ID = source1@PRODUCT_TOPPING_ID,",
						"          TOPPING_NAME = source1@TOPPING_NAME,",
						"          TOPING_PRICE = source1@TOPING_PRICE,",
						"          IS_ACTIVE = source1@IS_ACTIVE,",
						"          EFFECTIVE_DATE = o_Effeective_Date,",
						"          FLAG = Active_Flag,",
						"          USER_CREATE_DATE = o_Create_User_date",
						"     )) ~> sinkInsert"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_PizzaProject_PRODUCT_TOPPINGS_STG')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableProduct_Topping_Dim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PizzaProject_AnandSir_SCD3_HR_PROMOTION_DIM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_target_AzureProject_Stg_STG_PROMOTION_csv",
								"type": "DatasetReference"
							},
							"name": "StgSTGPROMOTIONcsv"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrPromotionDim",
								"type": "DatasetReference"
							},
							"name": "HrPromotionDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrPromotionDim",
								"type": "DatasetReference"
							},
							"name": "Insertsink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrPromotionDim",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filterUpdate"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "filterInsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PROMOTION_ID as short,",
						"          PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as string,",
						"          START_DATE as string,",
						"          END_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> StgSTGPROMOTIONcsv",
						"source(output(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as string,",
						"          PREVIOUS_DISCOUNT_AMOUNT as string,",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> HrPromotionDim",
						"StgSTGPROMOTIONcsv, HrPromotionDim lookup(StgSTGPROMOTIONcsv@PROMOTION_ID == HrPromotionDim@PROMOTION_ID,",
						"     multiple: true,",
						"     broadcast: 'auto',",
						"     pickup: 'any')~> lookup1",
						"lookup1 derive(o_Create_user_date = currentDate(),",
						"          o_Start_Date = toDate(toString(toDate(StgSTGPROMOTIONcsv@END_DATE, 'yyyy-MM-dd HH:mm:SS'), 'MM/dd/yyyy'),'MM/dd/yyyy'),",
						"          o_End_Date = toDate(toString(toDate(StgSTGPROMOTIONcsv@START_DATE, 'yyyy-MM-dd HH:mm:SS'), 'MM/dd/yyyy'),'MM/dd/yyyy'),",
						"          src_Md5 = md5(concat(StgSTGPROMOTIONcsv@PROMOTION_NAME,StgSTGPROMOTIONcsv@PROMOTION_TYPE,\r",
						"StgSTGPROMOTIONcsv@DISCOUNT_AMOUNT,toString(toDate(StgSTGPROMOTIONcsv@START_DATE, 'yyyy-MM-dd HH:mm:SS'), 'MM/dd/yyyy'),toString(toDate(StgSTGPROMOTIONcsv@END_DATE, 'yyyy-MM-dd HH:mm:SS'), 'MM/dd/yyyy'))),",
						"          tgt_Md5 = md5(concat(HrPromotionDim@PROMOTION_NAME,HrPromotionDim@PROMOTION_TYPE,HrPromotionDim@DISCOUNT_AMOUNT,toString(HrPromotionDim@START_DATE), 'MM/dd/yyyy'),\r",
						"toString(HrPromotionDim@END_DATE), 'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(HrPromotionDim@PROMOTION_ID) && src_Md5 != tgt_Md5) ~> filterUpdate",
						"filterUpdate alterRow(updateIf(1==1)) ~> alterRow1",
						"derivedColumn1 filter(isNull(PROMOTION_DIM_KEY)) ~> filterInsert",
						"filterInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as string,",
						"          PREVIOUS_DISCOUNT_AMOUNT as string,",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PROMOTION_ID = StgSTGPROMOTIONcsv@PROMOTION_ID,",
						"          PROMOTION_NAME = StgSTGPROMOTIONcsv@PROMOTION_NAME,",
						"          PREVIOUS_PROMOTION_NAME,",
						"          PROMOTION_TYPE = StgSTGPROMOTIONcsv@PROMOTION_TYPE,",
						"          PREVIOUS_PROMOTION_TYPE,",
						"          DISCOUNT_AMOUNT = StgSTGPROMOTIONcsv@DISCOUNT_AMOUNT,",
						"          PREVIOUS_DISCOUNT_AMOUNT,",
						"          START_DATE = StgSTGPROMOTIONcsv@START_DATE,",
						"          PREVIOUS_START_DATE,",
						"          END_DATE = StgSTGPROMOTIONcsv@END_DATE,",
						"          PREVIOUS_END_DATE,",
						"          CREATE_USER_DATE = o_Create_user_date",
						"     )) ~> Insertsink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as string,",
						"          PREVIOUS_DISCOUNT_AMOUNT as string,",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['PROMOTION_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PROMOTION_DIM_KEY,",
						"          PROMOTION_ID = HrPromotionDim@PROMOTION_ID,",
						"          PREVIOUS_PROMOTION_NAME,",
						"          PREVIOUS_PROMOTION_TYPE,",
						"          PREVIOUS_DISCOUNT_AMOUNT,",
						"          PREVIOUS_START_DATE,",
						"          PREVIOUS_END_DATE,",
						"          CREATE_USER_DATE",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_target_AzureProject_Stg_STG_PROMOTION_csv')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHrPromotionDim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PizzaProject_LOCATION_DIM_SCD2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_STG_STORE_LOCATION_csv",
								"type": "DatasetReference"
							},
							"name": "STGSTORELOCATIONCSV"
						},
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_STG_STATE_COUNTRY_csv",
								"type": "DatasetReference"
							},
							"name": "STGSTATECOUNTRYcsv"
						},
						{
							"dataset": {
								"referenceName": "ds_SqlServer_PizzaProject_LOCATION_DIM",
								"type": "DatasetReference"
							},
							"name": "sourceHrLocationDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_SqlServer_PizzaProject_LOCATION_DIM",
								"type": "DatasetReference"
							},
							"name": "InsertLOCATIONDIM"
						},
						{
							"dataset": {
								"referenceName": "ds_SqlServer_PizzaProject_LOCATION_DIM",
								"type": "DatasetReference"
							},
							"name": "UpdateLOCATIONDIM"
						}
					],
					"transformations": [
						{
							"name": "InnerJoinStateCountryId"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "selectInsert"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filterInsert"
						},
						{
							"name": "filterUpdate"
						},
						{
							"name": "alterRowInsert"
						},
						{
							"name": "selectUpdate"
						},
						{
							"name": "alterRowUpdate"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          STORE_LOCATION_ID as string,",
						"          STORE_NAME as string,",
						"          STORE_ADDRESS as string,",
						"          STORE_PHONE_NUMBER as string,",
						"          STORE_OPEN_TIME as string,",
						"          STORE_CLOSE_TIME as string,",
						"          STATE_COUNTRY_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGSTORELOCATIONCSV",
						"source(output(",
						"          STATE_COUNTRY_ID as string,",
						"          STATE_NAME as string,",
						"          STATE_ABBREVATION as string,",
						"          STATE_COUNTRY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGSTATECOUNTRYcsv",
						"source(output(",
						"          Location_Dim_Key as integer,",
						"          STORE_LOCATION_ID as string,",
						"          STORE_NAME as string,",
						"          STORE_ADDRESS as string,",
						"          STORE_PHONE_NUMBER as string,",
						"          STATE_COUNTRY as string,",
						"          STORE_OPEN_TIME as string,",
						"          STORE_CLOSE_TIME as string,",
						"          STATE_NAME as string,",
						"          CREATE_USER_DATE as date,",
						"          FLAG as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '\\nselect * from hr.location_dim where FLAG = 1',",
						"     format: 'query') ~> sourceHrLocationDim",
						"STGSTORELOCATIONCSV, STGSTATECOUNTRYcsv join(STGSTORELOCATIONCSV@STATE_COUNTRY_ID == STGSTATECOUNTRYcsv@STATE_COUNTRY_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> InnerJoinStateCountryId",
						"InnerJoinStateCountryId select(mapColumn(",
						"          STORE_LOCATION_ID,",
						"          STORE_NAME,",
						"          STORE_ADDRESS,",
						"          STORE_OPEN_TIME,",
						"          STORE_CLOSE_TIME,",
						"          STATE_NAME,",
						"          STORE_PHONE_NUMBER,",
						"          STATE_COUNTRY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"lookup1 derive(o_CREATE_USER_DATE = currentDate(),",
						"          ActiveFlag = 1,",
						"          InActive = 0,",
						"          FLAG_I_U = iif(isNull(Location_Dim_Key), 'Insert',iif(select1@STORE_NAME !=sourceHrLocationDim@STORE_NAME ||  select1@STORE_ADDRESS  != sourceHrLocationDim@STORE_ADDRESS || select1@STORE_OPEN_TIME != sourceHrLocationDim@STORE_OPEN_TIME || select1@STORE_CLOSE_TIME != sourceHrLocationDim@STORE_CLOSE_TIME || select1@STORE_PHONE_NUMBER != sourceHrLocationDim@STORE_PHONE_NUMBER ,'Update','NC' ))) ~> derivedColumn1",
						"filterInsert select(mapColumn(",
						"          STORE_LOCATION_ID = select1@STORE_LOCATION_ID,",
						"          STORE_NAME = select1@STORE_NAME,",
						"          STORE_ADDRESS = select1@STORE_ADDRESS,",
						"          STORE_PHONE_NUMBER = select1@STORE_PHONE_NUMBER,",
						"          STATE_COUNTRY = select1@STATE_COUNTRY,",
						"          STORE_OPEN_TIME = select1@STORE_OPEN_TIME,",
						"          STORE_CLOSE_TIME = select1@STORE_CLOSE_TIME,",
						"          STATE_NAME = select1@STATE_NAME,",
						"          ActiveFlag,",
						"          FLAG_I_U,",
						"          FLAG,",
						"          o_CREATE_USER_DATE,",
						"          CREATE_USER_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInsert",
						"select1, sourceHrLocationDim lookup(select1@STORE_LOCATION_ID == sourceHrLocationDim@STORE_LOCATION_ID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"derivedColumn1 filter(FLAG_I_U == 'Insert' ||  FLAG_I_U == 'Update') ~> filterInsert",
						"derivedColumn1 filter(FLAG_I_U == 'Update') ~> filterUpdate",
						"selectInsert alterRow(insertIf(FLAG_I_U=='Insert'||FLAG_I_U=='Update')) ~> alterRowInsert",
						"filterUpdate select(mapColumn(",
						"          Location_Dim_Key,",
						"          CREATE_USER_DATE,",
						"          FLAG,",
						"          o_CREATE_USER_DATE,",
						"          InActive,",
						"          FLAG_I_U",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUpdate",
						"selectUpdate alterRow(upsertIf(FLAG_I_U=='Update')) ~> alterRowUpdate",
						"alterRowInsert keyGenerate(output(Location_Dim_Key as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Location_Dim_Key,",
						"          STORE_LOCATION_ID,",
						"          STORE_NAME,",
						"          STORE_ADDRESS,",
						"          STORE_PHONE_NUMBER,",
						"          STATE_COUNTRY,",
						"          STORE_OPEN_TIME,",
						"          STORE_CLOSE_TIME,",
						"          STATE_NAME,",
						"          ActiveFlag,",
						"          FLAG_I_U,",
						"          FLAG,",
						"          o_CREATE_USER_DATE,",
						"          CREATE_USER_DATE",
						"     )) ~> InsertLOCATIONDIM",
						"alterRowUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Location_Dim_Key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Location_Dim_Key,",
						"          CREATE_USER_DATE = o_CREATE_USER_DATE,",
						"          FLAG = InActive",
						"     )) ~> UpdateLOCATIONDIM"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_STG_STORE_LOCATION_csv')]",
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_STG_STATE_COUNTRY_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_PizzaProject_LOCATION_DIM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PizzaProject_OrderLIneDim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrderLineDim",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_LINE_ID as integer,",
						"          UNIT_PRICE as double,",
						"          QUANTITY as short,",
						"          PROMOTION_AMOUNT as double,",
						"          PROMOTION_ID as short,",
						"          ORDER_ID as integer,",
						"          PRODUCT_ID as short,",
						"          PRODUCT_TOPPING_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 cast(output(",
						"          ORDER_LINE_ID as integer,",
						"          UNIT_PRICE as decimal(5,2),",
						"          QUANTITY as integer,",
						"          PROMOTION_AMOUNT as decimal(5,2),",
						"          PROMOTION_ID as integer,",
						"          ORDER_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_TOPPING_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrderLineDim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PizzaProject_Query_SCD3_HR_PROMOTION_DIM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableStgPromotion",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrPromotionDim",
								"type": "DatasetReference"
							},
							"name": "InsertHrPromotionDim"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrPromotionDim",
								"type": "DatasetReference"
							},
							"name": "UpdateHrPromotionDim"
						}
					],
					"transformations": [
						{
							"name": "filterUpdate"
						},
						{
							"name": "filterInsert"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SRC_PROMOTION_ID as integer,",
						"          SRC_PROMOTION_NAME as string,",
						"          SRC_PROMOTION_TYPE as string,",
						"          SRC_DISCOUNT_AMOUNT as string,",
						"          SRC_START_DATE as date,",
						"          SRC_END_DATE as date,",
						"          TGT_PROMOTION_DIM_KEY as integer,",
						"          TGT_PROMOTION_ID as integer,",
						"          TGT_PROMOTION_NAME as string,",
						"          TGT_PREVIOUS_PROMOTION_NAME as string,",
						"          TGT_PROMOTION_TYPE as string,",
						"          TGT_PREVIOUS_PROMOTION_TYPE as string,",
						"          TGT_DISCOUNT_AMOUNT as string,",
						"          TGT_PREVIOUS_DISCOUNT_AMOUNT as string,",
						"          TGT_START_DATE as date,",
						"          TGT_PREVIOUS_START_DATE as date,",
						"          TGT_END_DATE as date,",
						"          TGT_PREVIOUS_END_DATE as date,",
						"          TGT_CREATE_USER_DATE as date,",
						"          FLAG_UPDATE as string,",
						"          FLAG_INSERT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT                \\r\\nP1.PROMOTION_ID     AS SRC_PROMOTION_ID ,\\r\\nP1.PROMOTION_NAME     AS SRC_PROMOTION_NAME,\\r\\nP1.PROMOTION_TYPE     AS SRC_PROMOTION_TYPE,\\r\\nP1.DISCOUNT_AMOUNT     AS SRC_DISCOUNT_AMOUNT,\\r\\nP1.START_DATE     AS SRC_START_DATE,\\r\\nP1.END_DATE    AS SRC_END_DATE,\\r\\nP2.PROMOTION_DIM_KEY AS TGT_PROMOTION_DIM_KEY ,     \\r\\nP2.PROMOTION_ID     AS TGT_PROMOTION_ID ,\\r\\nP2.PROMOTION_NAME     AS TGT_PROMOTION_NAME,\\r\\nP2.PREVIOUS_PROMOTION_NAME     AS TGT_PREVIOUS_PROMOTION_NAME ,\\r\\nP2.PROMOTION_TYPE AS TGT_PROMOTION_TYPE,\\r\\nP2.PREVIOUS_PROMOTION_TYPE      AS TGT_PREVIOUS_PROMOTION_TYPE ,\\r\\nP2.DISCOUNT_AMOUNT     AS TGT_DISCOUNT_AMOUNT     ,\\r\\nP2.PREVIOUS_DISCOUNT_AMOUNT     AS TGT_PREVIOUS_DISCOUNT_AMOUNT     ,\\r\\nP2.START_DATE     AS TGT_START_DATE     ,\\r\\nP2.PREVIOUS_START_DATE     AS TGT_PREVIOUS_START_DATE,\\r\\nP2.END_DATE     AS TGT_END_DATE ,\\r\\nP2.PREVIOUS_END_DATE     AS TGT_PREVIOUS_END_DATE,\\r\\nP2.CREATE_USER_DATE AS TGT_CREATE_USER_DATE,\\r\\nCASE WHEN P2.PROMOTION_ID IS NOT NULL AND (P1.PROMOTION_NAME <> P2.PROMOTION_NAME OR  P1.PROMOTION_TYPE <> P2.PROMOTION_TYPE \\r\\nOR P1.DISCOUNT_AMOUNT <> P2.DISCOUNT_AMOUNT\\r\\n)THEN \\'U\\' ELSE \\'N\\' END FLAG_UPDATE,\\r\\nCASE WHEN P2.PROMOTION_ID IS  NULL AND (P1.PROMOTION_NAME <> P2.PROMOTION_NAME OR  P1.PROMOTION_TYPE <> P2.PROMOTION_TYPE \\r\\nOR P1.DISCOUNT_AMOUNT <> P2.DISCOUNT_AMOUNT\\r\\n) THEN \\'I\\' ELSE \\'N\\' END FLAG_INSERT\\r\\nFROM HR.STG_PROMOTION P1\\r\\nLEFT JOIN HR.PROMOTION_DIM P2\\r\\nON P1.PROMOTION_ID = P2.PROMOTION_ID',",
						"     format: 'query') ~> source1",
						"source1 filter(FLAG_UPDATE == 'U') ~> filterUpdate",
						"source1 filter(FLAG_INSERT == 'I') ~> filterInsert",
						"filterUpdate alterRow(updateIf(1==1)) ~> alterRow1",
						"filterInsert derive(o_Create_user_date = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as string,",
						"          PREVIOUS_DISCOUNT_AMOUNT as string,",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PROMOTION_ID = SRC_PROMOTION_ID,",
						"          PROMOTION_NAME = SRC_PROMOTION_NAME,",
						"          PROMOTION_TYPE = SRC_PROMOTION_TYPE,",
						"          DISCOUNT_AMOUNT = SRC_DISCOUNT_AMOUNT,",
						"          START_DATE = SRC_START_DATE,",
						"          END_DATE = SRC_END_DATE,",
						"          CREATE_USER_DATE = o_Create_user_date",
						"     )) ~> InsertHrPromotionDim",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as string,",
						"          PREVIOUS_DISCOUNT_AMOUNT as string,",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['PROMOTION_DIM_KEY'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PROMOTION_ID = TGT_PROMOTION_ID,",
						"          PROMOTION_DIM_KEY = TGT_PROMOTION_DIM_KEY,",
						"          PROMOTION_NAME = SRC_PROMOTION_NAME,",
						"          PREVIOUS_PROMOTION_NAME = TGT_PREVIOUS_PROMOTION_NAME,",
						"          PROMOTION_TYPE = SRC_PROMOTION_TYPE,",
						"          PREVIOUS_PROMOTION_TYPE = TGT_PREVIOUS_PROMOTION_TYPE,",
						"          DISCOUNT_AMOUNT = SRC_DISCOUNT_AMOUNT,",
						"          PREVIOUS_DISCOUNT_AMOUNT = TGT_PREVIOUS_DISCOUNT_AMOUNT,",
						"          START_DATE = SRC_START_DATE,",
						"          PREVIOUS_START_DATE = TGT_PREVIOUS_START_DATE,",
						"          END_DATE = SRC_END_DATE,",
						"          PREVIOUS_END_DATE = TGT_PREVIOUS_END_DATE,",
						"          CREATE_USER_DATE = TGT_CREATE_USER_DATE",
						"     )) ~> UpdateHrPromotionDim"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableStgPromotion')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHrPromotionDim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PizzaProject_STG_PROMOTION')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_target_AzureProject_Stg_STG_PROMOTION_csv",
								"type": "DatasetReference"
							},
							"name": "STGPROMOTIONcsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableStgPromotion",
								"type": "DatasetReference"
							},
							"name": "SqlServerStgPromotion"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PROMOTION_ID as short,",
						"          PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as string,",
						"          START_DATE as string,",
						"          END_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGPROMOTIONcsv",
						"STGPROMOTIONcsv derive(o_START_DATE = toDate(START_DATE, 'yyyy-MM-dd','en-US'),",
						"          o_END_DATE = toDate(END_DATE, 'yyyy-MM-dd','en-US')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Promotion_ID as integer,",
						"          Promotion_Name as string,",
						"          Promotion_Type as string,",
						"          Discount_amount as decimal(5,2),",
						"          START_DATE as date,",
						"          END_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Promotion_ID = PROMOTION_ID,",
						"          Promotion_Name = PROMOTION_NAME,",
						"          Promotion_Type = PROMOTION_TYPE,",
						"          Discount_amount = DISCOUNT_AMOUNT,",
						"          START_DATE = o_START_DATE,",
						"          END_DATE = o_END_DATE",
						"     )) ~> SqlServerStgPromotion"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_target_AzureProject_Stg_STG_PROMOTION_csv')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableStgPromotion')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Pizza_Project_CHANNEL_REF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_STG_CHANNEL_csv",
								"type": "DatasetReference"
							},
							"name": "STGCHANNEL"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_PizzaProject_CHANNEL_REF",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "surrogateKeyCHANNELREFKEY"
						},
						{
							"name": "select1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CHANNEL_ID as short,",
						"          CHANNEL_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGCHANNEL",
						"STGCHANNEL derive(CREATE_USER_DATE = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 keyGenerate(output(CHANNEL_REF_KEY as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyCHANNELREFKEY",
						"surrogateKeyCHANNELREFKEY select(mapColumn(",
						"          CHANNEL_REF_KEY,",
						"          CHANNEL_ID,",
						"          CHANNEL_TYPE,",
						"          CREATE_USER_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CHANNEL_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CHANNEL_REF_KEY,",
						"          CHANNEL_ID,",
						"          CHANNEL_TYPE,",
						"          CREATE_USER_DATE",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_STG_CHANNEL_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_PizzaProject_CHANNEL_REF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Pizza_Project_CustomerDim_AnandSir')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_CUSTOMERS_csv",
								"type": "DatasetReference"
							},
							"name": "CUSTOMERScsv"
						},
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_CUSTOMERP_PHONR_NUMBER_csv",
								"type": "DatasetReference"
							},
							"name": "CUSTOMERPPHONRNUMBERCSV"
						},
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_STG_CUSTOMER_EMAIL_csv",
								"type": "DatasetReference"
							},
							"name": "STGCUSTOMEREMAILcsv"
						},
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_STG_HUT_LOVER_csv",
								"type": "DatasetReference"
							},
							"name": "STGHUTLOVERcsv"
						},
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_STG_CUSTOMER_ADDRESS_csv",
								"type": "DatasetReference"
							},
							"name": "STGCUSTOMERADDRESS"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "select3"
						},
						{
							"name": "select4"
						},
						{
							"name": "window1"
						},
						{
							"name": "window2"
						},
						{
							"name": "select5"
						},
						{
							"name": "join4"
						},
						{
							"name": "select6"
						},
						{
							"name": "window3"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_ID as short,",
						"          CUSTOMER_FIRST_NAME as string,",
						"          CUSTOMER_LAST_NAME as string,",
						"          CUSTOMER_DOB as string,",
						"          CUSTOMER_TYPE as string,",
						"          IS_LOYAL as boolean,",
						"          FIRST_PURCHASE_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CUSTOMERScsv",
						"source(output(",
						"          CUSTOMER_PHONE_NUMBER_ID as short,",
						"          CUSTOMER_PHONE_NUMBER as string,",
						"          CUSTOMER_PHONE_TYPE as string,",
						"          CUSTOMER_PHONE_STATUS as string,",
						"          CUSTOMER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CUSTOMERPPHONRNUMBERCSV",
						"source(output(",
						"          CUSTOMER_EMAIL_ID as short,",
						"          CUSTOMER_EMAIL as string,",
						"          CUSTOMER_EMAIL_TYPE as string,",
						"          CUSTOMER_EMAIL_STATUS as string,",
						"          CUSTOMER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGCUSTOMEREMAILcsv",
						"source(output(",
						"          HUT_LOVERS_ID as short,",
						"          JOINING_DATE as string,",
						"          IS_ACTIVE as boolean,",
						"          MEMBER_ID as short,",
						"          CUSTMOER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGHUTLOVERcsv",
						"source(output(",
						"          CUSTOMER_ADDRESS_ID as short,",
						"          ADDRESS_LANE1 as string,",
						"          ADDRESS_LANE_2 as string,",
						"          CITY_NAME as string,",
						"          STATE_NAME as string,",
						"          COUNTRY_NAME as string,",
						"          ZIP_CODE as integer,",
						"          GATE_CODE as short,",
						"          ADDRESS_TYPE as string,",
						"          ADDRESS_STATUS as string,",
						"          CUSTOMER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGCUSTOMERADDRESS",
						"select1, filter2 join(select1@CUSTOMER_ID == select2@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, filter3 join(select1@CUSTOMER_ID == select3@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, STGHUTLOVERcsv join(select1@CUSTOMER_ID == CUSTMOER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"select5 derive(STG_CREATE_USER_ID = 'LALLOO_ETL',",
						"          STG_CREATE_USER_DATE = currentUTC()) ~> derivedColumn1",
						"CUSTOMERScsv select(mapColumn(",
						"          CUSTOMER_ID,",
						"          CUSTOMER_FIRST_NAME,",
						"          CUSTOMER_LAST_NAME,",
						"          IS_LOYAL",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"CUSTOMERPPHONRNUMBERCSV select(mapColumn(",
						"          CUSTOMER_PHONE_NUMBER,",
						"          CUSTOMER_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"STGCUSTOMEREMAILcsv select(mapColumn(",
						"          CUSTOMER_EMAIL,",
						"          CUSTOMER_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"STGHUTLOVERcsv select(mapColumn(",
						"          JOINING_DATE,",
						"          CUSTMOER_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select2 window(over(CUSTOMER_ID),",
						"     asc(CUSTOMER_ID, true),",
						"     Secondary_Number = lead(CUSTOMER_PHONE_NUMBER),",
						"          RowNumber_Ph = rowNumber()) ~> window1",
						"select3 window(over(CUSTOMER_ID),",
						"     asc(CUSTOMER_ID, true),",
						"     Secondory_Email = lead(CUSTOMER_EMAIL),",
						"          RowNumber_Email = rowNumber()) ~> window2",
						"join4 select(mapColumn(",
						"          CUSTOMER_ID = select1@CUSTOMER_ID,",
						"          CUSTOMER_FIRST_NAME,",
						"          CUSTOMER_LAST_NAME,",
						"          IS_LOYAL,",
						"          CUSTOMER_PHONE_NUMBER,",
						"          CUSTOMER_EMAIL,",
						"          JOINING_DATE,",
						"          ADDRESS_LANE1,",
						"          CITY_NAME,",
						"          STATE_NAME,",
						"          COUNTRY_NAME,",
						"          ZIP_CODE,",
						"          GATE_CODE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"join3, derivedColumn2 join(select1@CUSTOMER_ID == select6@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"STGCUSTOMERADDRESS select(mapColumn(",
						"          ADDRESS_LANE1,",
						"          CITY_NAME,",
						"          STATE_NAME,",
						"          COUNTRY_NAME,",
						"          ZIP_CODE,",
						"          GATE_CODE,",
						"          CUSTOMER_ID,",
						"          CUSTOMER_ADDRESS_ID,",
						"          ADDRESS_STATUS,",
						"          ADDRESS_TYPE,",
						"          ADDRESS_LANE_2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select6 window(over(CUSTOMER_ID),",
						"     desc(ADDRESS_TYPE, true),",
						"     LEAD_ACTIVE = lead(ADDRESS_TYPE),",
						"          o_Address_Lane1 = lead(ADDRESS_LANE1),",
						"          {o_Address_Lane_2     } = lead(ADDRESS_LANE_2),",
						"          {o_City_Name     } = lead(CITY_NAME),",
						"          {o_State_Name     } = lead(STATE_NAME),",
						"          o_Country_Name = lead(COUNTRY_NAME),",
						"          o_Zip_Code = lead(ZIP_CODE),",
						"          {o_Gate_Code     } = lead(GATE_CODE),",
						"          RowNumber_Active = rowNumber()) ~> window3",
						"window3 filter(RowNumber_Active==1) ~> filter1",
						"window1 filter(RowNumber_Ph==1) ~> filter2",
						"window2 filter(RowNumber_Email==1) ~> filter3",
						"filter1 derive(o_ADDRESS_LANE1 = case(ADDRESS_TYPE=='Office', ADDRESS_LANE1,'null'),",
						"          o_CITY_NAME = case(ADDRESS_TYPE=='Office', ADDRESS_LANE1)) ~> derivedColumn2",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_CUSTOMERS_csv')]",
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_CUSTOMERP_PHONR_NUMBER_csv')]",
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_STG_CUSTOMER_EMAIL_csv')]",
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_STG_HUT_LOVER_csv')]",
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_STG_CUSTOMER_ADDRESS_csv')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Pizza_Project_CustomerDim_LALLOO')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_CUSTOMERS_csv",
								"type": "DatasetReference"
							},
							"name": "CUSTOMERScsv"
						},
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_CUSTOMERP_PHONR_NUMBER_csv",
								"type": "DatasetReference"
							},
							"name": "CUSTOMERPPHONRNUMBERCSV"
						},
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_STG_CUSTOMER_EMAIL_csv",
								"type": "DatasetReference"
							},
							"name": "STGCUSTOMEREMAILcsv"
						},
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_STG_HUT_LOVER_csv",
								"type": "DatasetReference"
							},
							"name": "STGHUTLOVERcsv"
						},
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_STG_CUSTOMER_ADDRESS_csv",
								"type": "DatasetReference"
							},
							"name": "STGCUSTOMERADDRESS"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_SqlServer_CustomerDim",
								"type": "DatasetReference"
							},
							"name": "dsSqlServerCustomerDim"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumnIIFAddress"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "AggCustPriSecEmail"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "AggPhoneNumber"
						},
						{
							"name": "AggOfficeResidencyAddress"
						},
						{
							"name": "select2"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_ID as short,",
						"          CUSTOMER_FIRST_NAME as string,",
						"          CUSTOMER_LAST_NAME as string,",
						"          CUSTOMER_DOB as string,",
						"          CUSTOMER_TYPE as string,",
						"          IS_LOYAL as boolean,",
						"          FIRST_PURCHASE_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CUSTOMERScsv",
						"source(output(",
						"          CUSTOMER_PHONE_NUMBER_ID as short,",
						"          CUSTOMER_PHONE_NUMBER as string,",
						"          CUSTOMER_PHONE_TYPE as string,",
						"          CUSTOMER_PHONE_STATUS as string,",
						"          CUSTOMER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CUSTOMERPPHONRNUMBERCSV",
						"source(output(",
						"          CUSTOMER_EMAIL_ID as short,",
						"          CUSTOMER_EMAIL as string,",
						"          CUSTOMER_EMAIL_TYPE as string,",
						"          CUSTOMER_EMAIL_STATUS as string,",
						"          CUSTOMER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGCUSTOMEREMAILcsv",
						"source(output(",
						"          HUT_LOVERS_ID as short,",
						"          JOINING_DATE as string,",
						"          IS_ACTIVE as boolean,",
						"          MEMBER_ID as short,",
						"          CUSTMOER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGHUTLOVERcsv",
						"source(output(",
						"          CUSTOMER_ADDRESS_ID as short,",
						"          ADDRESS_LANE1 as string,",
						"          ADDRESS_LANE_2 as string,",
						"          CITY_NAME as string,",
						"          STATE_NAME as string,",
						"          COUNTRY_NAME as string,",
						"          ZIP_CODE as integer,",
						"          GATE_CODE as short,",
						"          ADDRESS_TYPE as string,",
						"          ADDRESS_STATUS as string,",
						"          CUSTOMER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGCUSTOMERADDRESS",
						"select1, AggPhoneNumber join(select1@CUSTOMER_ID == AggPhoneNumber@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, AggCustPriSecEmail join(select1@CUSTOMER_ID == AggCustPriSecEmail@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, STGHUTLOVERcsv join(select1@CUSTOMER_ID == CUSTMOER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join4 derive(STG_CREATE_USER_ID = 'LALLOO_ETL',",
						"          STG_CREATE_USER_DATE = currentUTC()) ~> derivedColumn1",
						"CUSTOMERScsv select(mapColumn(",
						"          CUSTOMER_ID,",
						"          CUSTOMER_FIRST_NAME,",
						"          CUSTOMER_LAST_NAME,",
						"          IS_LOYAL",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"join3, AggOfficeResidencyAddress join(select1@CUSTOMER_ID == AggOfficeResidencyAddress@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"STGCUSTOMERADDRESS derive(o_ADDRESS_LANE1 = iif(ADDRESS_TYPE == 'Office', ADDRESS_LANE1, toString(null())),",
						"          o_ADDRESS_LANE_2 = iif(ADDRESS_TYPE == 'Office', ADDRESS_LANE_2, toString(null())),",
						"          o_CITY_NAME = iif(ADDRESS_TYPE == 'Office', CITY_NAME, toString(null())),",
						"          o_STATE_NAME = iif(ADDRESS_TYPE == 'Office', STATE_NAME, toString(null())),",
						"          o_COUNTRY_NAME = iif(ADDRESS_TYPE == 'Office', COUNTRY_NAME, toString(null())),",
						"          o_ZIP_CODE = iif(ADDRESS_TYPE == 'Office', ZIP_CODE, toInteger(null())),",
						"          o_GATE_CODE = iif(ADDRESS_TYPE == 'Office', GATE_CODE,toShort(null())),",
						"          r_ADDRESS_LANE1 = iif(ADDRESS_TYPE == 'Residential', ADDRESS_LANE1, toString(null())),",
						"          r_ADDRESS_LANE_2 = iif(ADDRESS_TYPE == 'Residential', ADDRESS_LANE_2, toString(null())),",
						"          r_CITY_NAME = iif(ADDRESS_TYPE == 'Residential', CITY_NAME, toString(null())),",
						"          r_STATE_NAME = iif(ADDRESS_TYPE == 'Residential', STATE_NAME, toString(null())),",
						"          r_COUNTRY_NAME = iif(ADDRESS_TYPE == 'Residential', COUNTRY_NAME, toString(null())),",
						"          r_ZIP_CODE = iif(ADDRESS_TYPE == 'Residential', ZIP_CODE, toInteger(null())),",
						"          r_GATE_CODE = iif(ADDRESS_TYPE == 'Residential', GATE_CODE, toShort(null()))) ~> derivedColumnIIFAddress",
						"STGCUSTOMEREMAILcsv derive(Primary_EMAIL = iif(CUSTOMER_EMAIL_TYPE == 'Primary', CUSTOMER_EMAIL, toString(null())),",
						"          Secondary_EMAIL = iif(CUSTOMER_EMAIL_TYPE == 'Secondary', CUSTOMER_EMAIL, toString(null()))) ~> derivedColumn3",
						"derivedColumn3 aggregate(groupBy(CUSTOMER_ID),",
						"     PrimaryEMAIL = max(Primary_EMAIL),",
						"          SecondaryEMAIL = max(Secondary_EMAIL)) ~> AggCustPriSecEmail",
						"CUSTOMERPPHONRNUMBERCSV derive(HOME_PHONE = iif(CUSTOMER_PHONE_TYPE == 'Home', CUSTOMER_PHONE_NUMBER, toString(null())),",
						"          CELL_PHONE = iif(CUSTOMER_PHONE_TYPE == 'Cell', CUSTOMER_PHONE_NUMBER, toString(null()))) ~> derivedColumn4",
						"derivedColumn4 aggregate(groupBy(CUSTOMER_ID),",
						"     PRIMARY_PHONE_NUMBER = max(HOME_PHONE),",
						"          SECONDARY_PHONE_NUMBER = max(CELL_PHONE)) ~> AggPhoneNumber",
						"derivedColumnIIFAddress aggregate(groupBy(CUSTOMER_ID),",
						"     Office_ADDRESS_LANE1 = max(o_ADDRESS_LANE1),",
						"          Office_ADDRESS_LANE_2 = max(o_ADDRESS_LANE_2),",
						"          Office_CITY_NAME = max(o_CITY_NAME),",
						"          Office_STATE_NAME = max(o_STATE_NAME),",
						"          Office_COUNTRY_NAME = max(o_COUNTRY_NAME),",
						"          Office_ZIP_CODE = max(o_ZIP_CODE),",
						"          Office_GATE_CODE = max(o_GATE_CODE),",
						"          Residential_ADDRESS_LANE1 = max(r_ADDRESS_LANE1),",
						"          Residential_ADDRESS_LANE_2 = max(r_ADDRESS_LANE_2),",
						"          Residential_CITY_NAME = max(r_CITY_NAME),",
						"          Residential_STATE_NAME = max(r_STATE_NAME),",
						"          Residential_COUNTRY_NAME = max(r_COUNTRY_NAME),",
						"          Residential_ZIP_CODE = max(r_ZIP_CODE),",
						"          Residential_GATE_CODE = max(r_GATE_CODE)) ~> AggOfficeResidencyAddress",
						"derivedColumn1 select(mapColumn(",
						"          CUSTMOER_ID = select1@CUSTOMER_ID,",
						"          CUSTOMER_FIRST_NAME,",
						"          CUSTOMER_LAST_NAME,",
						"          IS_LOYAL,",
						"          PrimaryEMAIL,",
						"          SecondaryEMAIL,",
						"          PRIMARY_PHONE_NUMBER,",
						"          SECONDARY_PHONE_NUMBER,",
						"          Office_ADDRESS_LANE1,",
						"          Office_ADDRESS_LANE_2,",
						"          Office_CITY_NAME,",
						"          Office_STATE_NAME,",
						"          Office_COUNTRY_NAME,",
						"          Office_ZIP_CODE,",
						"          Office_GATE_CODE,",
						"          Residential_ADDRESS_LANE1,",
						"          Residential_ADDRESS_LANE_2,",
						"          Residential_CITY_NAME,",
						"          Residential_STATE_NAME,",
						"          Residential_COUNTRY_NAME,",
						"          Residential_ZIP_CODE,",
						"          Residential_GATE_CODE,",
						"          JOINING_DATE,",
						"          STG_CREATE_USER_ID,",
						"          STG_CREATE_USER_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 keyGenerate(output(o_CUSTOMER_DIM_KEY as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 select(mapColumn(",
						"          CUSTOMER_DIM_KEY = o_CUSTOMER_DIM_KEY,",
						"          CUSTMOER_ID,",
						"          CUSTOMER_FIRST_NAME,",
						"          CUSTOMER_LAST_NAME,",
						"          IS_LOYAL,",
						"          PrimaryEMAIL,",
						"          SecondaryEMAIL,",
						"          PRIMARY_PHONE_NUMBER,",
						"          SECONDARY_PHONE_NUMBER,",
						"          Office_ADDRESS_LANE1,",
						"          Office_ADDRESS_LANE_2,",
						"          Office_CITY_NAME,",
						"          Office_STATE_NAME,",
						"          Office_COUNTRY_NAME,",
						"          Office_ZIP_CODE,",
						"          Office_GATE_CODE,",
						"          Residential_ADDRESS_LANE1,",
						"          Residential_ADDRESS_LANE_2,",
						"          Residential_CITY_NAME,",
						"          Residential_STATE_NAME,",
						"          Residential_COUNTRY_NAME,",
						"          Residential_ZIP_CODE,",
						"          Residential_GATE_CODE,",
						"          JOINING_DATE,",
						"          STG_CREATE_USER_ID,",
						"          STG_CREATE_USER_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CUSTOMER_DIM_KEY,",
						"          CUSTMOER_ID,",
						"          CUSTOMER_FIRST_NAME,",
						"          CUSTOMER_LAST_NAME,",
						"          IS_LOYAL,",
						"          PrimaryEMAIL,",
						"          SecondaryEMAIL,",
						"          PRIMARY_PHONE_NUMBER,",
						"          SECONDARY_PHONE_NUMBER,",
						"          Office_ADDRESS_LANE1,",
						"          Office_ADDRESS_LANE_2,",
						"          Office_CITY_NAME,",
						"          Office_STATE_NAME,",
						"          Office_COUNTRY_NAME,",
						"          Office_ZIP_CODE,",
						"          Office_GATE_CODE,",
						"          Residential_ADDRESS_LANE1,",
						"          Residential_ADDRESS_LANE_2,",
						"          Residential_CITY_NAME,",
						"          Residential_STATE_NAME,",
						"          Residential_COUNTRY_NAME,",
						"          Residential_ZIP_CODE,",
						"          Residential_GATE_CODE,",
						"          JOINING_DATE,",
						"          STG_CREATE_USER_ID,",
						"          STG_CREATE_USER_DATE",
						"     )) ~> dsSqlServerCustomerDim"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_CUSTOMERS_csv')]",
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_CUSTOMERP_PHONR_NUMBER_csv')]",
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_STG_CUSTOMER_EMAIL_csv')]",
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_STG_HUT_LOVER_csv')]",
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_STG_CUSTOMER_ADDRESS_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_CustomerDim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Pizza_Project_DELIVERY_TYPE_REF_KEY')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_STG_DELIVERY_METHOD_csv",
								"type": "DatasetReference"
							},
							"name": "STGDELIVERYMETHOD"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_SqlServer_PizzaProject_DELIVERY_TYPE_REF",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "surrogateKeyDELIVERYTYPEREFKEY"
						},
						{
							"name": "select1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DELIVERY_ID as string,",
						"          DELIVERY_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGDELIVERYMETHOD",
						"STGDELIVERYMETHOD derive(CREATE_USER_DATE = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 keyGenerate(output(DELIVERY_TYPE_REF_KEY as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyDELIVERYTYPEREFKEY",
						"surrogateKeyDELIVERYTYPEREFKEY select(mapColumn(",
						"          DELIVERY_TYPE_REF_KEY,",
						"          DELIVERY_ID,",
						"          DELIVERY_TYPE,",
						"          CREATE_USER_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['DELIVERY_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_STG_DELIVERY_METHOD_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_PizzaProject_DELIVERY_TYPE_REF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Pizza_Project_Member_loyality_prog_fact')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTablestg_member_loyalty",
								"type": "DatasetReference"
							},
							"name": "StgMemberloyalty"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrder_dim",
								"type": "DatasetReference"
							},
							"name": "OrderDim"
						},
						{
							"dataset": {
								"referenceName": "ds_SqlServer_CustomerDim",
								"type": "DatasetReference"
							},
							"name": "CustomerDim"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrLocationDim",
								"type": "DatasetReference"
							},
							"name": "LocationDim"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableDateDateDim",
								"type": "DatasetReference"
							},
							"name": "DateDataDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTabl_Memember_loyality_prog_fact",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MEMBER_ID as integer,",
						"          ORDER_DATE as date,",
						"          INITIAL_POINTS_RECEIVED_DATE as date,",
						"          INITIAL_REWARD_POINTS as integer,",
						"          LAST_EARNED_POINTS as integer,",
						"          TOTAL_POINTS_EARNED as integer,",
						"          REMAINING_POINTS as integer,",
						"          IS_ACTIVE as string,",
						"          STORE_LOCATION_ID as integer,",
						"          ORDER_ID as integer,",
						"          CUSTOMER_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StgMemberloyalty",
						"source(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATE as date,",
						"          ORDER_STATUS as string,",
						"          TOTAL_AMOUNT as decimal(5,2),",
						"          TOTAL_TAX as decimal(5,2),",
						"          TIPS as decimal(5,2),",
						"          TOTAL_QUANTITY as integer,",
						"          DELIVERY_ID as integer,",
						"          CHANNEL_ID as integer,",
						"          STORE_LOCATION_ID as integer,",
						"          CUSTOMER_ID as integer,",
						"          PAYMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> OrderDim",
						"source(output(",
						"          CUSTOMER_DIM_KEY as long,",
						"          customer_id as short,",
						"          CUSTOMER_FIRST_NAME as string,",
						"          CUSTOMER_LAST_NAME as string,",
						"          IS_LOYAL as boolean,",
						"          PrimaryEMAIL as string,",
						"          SecondaryEMAIL as string,",
						"          PRIMARY_PHONE_NUMBER as string,",
						"          SECONDARY_PHONE_NUMBER as string,",
						"          Office_ADDRESS_LANE1 as string,",
						"          Office_ADDRESS_LANE_2 as string,",
						"          Office_CITY_NAME as string,",
						"          Office_STATE_NAME as string,",
						"          Office_COUNTRY_NAME as string,",
						"          Office_ZIP_CODE as integer,",
						"          Office_GATE_CODE as short,",
						"          Residential_ADDRESS_LANE1 as string,",
						"          Residential_ADDRESS_LANE_2 as string,",
						"          Residential_CITY_NAME as string,",
						"          Residential_STATE_NAME as string,",
						"          Residential_COUNTRY_NAME as string,",
						"          Residential_ZIP_CODE as integer,",
						"          Residential_GATE_CODE as short,",
						"          JOINING_DATE as string,",
						"          STG_CREATE_USER_ID as string,",
						"          STG_CREATE_USER_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CustomerDim",
						"source(output(",
						"          Location_Dim_Key as integer,",
						"          STORE_LOCATION_ID as integer,",
						"          STORE_NAME as string,",
						"          STORE_ADDRESS as string,",
						"          STORE_PHONE_NUMBER as string,",
						"          STATE_COUNTRY as string,",
						"          STORE_OPEN_TIME as string,",
						"          STORE_CLOSE_TIME as string,",
						"          STATE_NAME as string,",
						"          CREATE_USER_DATE as date,",
						"          FLAG as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> LocationDim",
						"source(output(",
						"          Date_Key as integer,",
						"          day_yyyy_mm_dd as date,",
						"          day_us_mm_dd_yyyy as date,",
						"          day_us_long as string,",
						"          day_us_m_d_yy as date,",
						"          week_short as string,",
						"          week_number as integer,",
						"          week_long as string,",
						"          month_in_quarter_number as string,",
						"          month_in_year_short as string,",
						"          month_in_year_long as string,",
						"          week_wk_qtr_year as string,",
						"          week_from_to as string,",
						"          week_starting as string,",
						"          week_wk_year_cont as string,",
						"          week_wk_year as string,",
						"          week_wk_qtr_year_cont as string,",
						"          day_in_week_short as string,",
						"          day_in_week_number as integer,",
						"          day_in_week_long as string,",
						"          month_short as string,",
						"          month_number as string,",
						"          month_long as string,",
						"          quarter_short_us as string,",
						"          year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DateDataDim",
						"StgMemberloyalty, OrderDim join(StgMemberloyalty@ORDER_ID == OrderDim@ORDER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, CustomerDim join(OrderDim@CUSTOMER_ID == CustomerDim@customer_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, LocationDim join(StgMemberloyalty@STORE_LOCATION_ID == LocationDim@STORE_LOCATION_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, DateDataDim join(StgMemberloyalty@ORDER_DATE == day_yyyy_mm_dd,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          MEMBER_ID,",
						"          CUSTOMER_DIM_KEY,",
						"          Location_Dim_Key,",
						"          Date_Key,",
						"          ORDER_ID = OrderDim@ORDER_ID,",
						"          TOTAL_POINTS_EARNED,",
						"          REMAINING_POINTS,",
						"          IS_ACTIVE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          member_id as integer,",
						"          customer_dim_key as long,",
						"          location_dim_key as integer,",
						"          date_key as integer,",
						"          order_id as integer,",
						"          total_points_earned as integer,",
						"          remaining_points as integer,",
						"          is_active as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          member_id = MEMBER_ID,",
						"          customer_dim_key = CUSTOMER_DIM_KEY,",
						"          location_dim_key = Location_Dim_Key,",
						"          date_key = Date_Key,",
						"          order_id = ORDER_ID,",
						"          total_points_earned = TOTAL_POINTS_EARNED,",
						"          remaining_points = REMAINING_POINTS,",
						"          is_active = IS_ACTIVE",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablestg_member_loyalty')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrder_dim')]",
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_CustomerDim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHrLocationDim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDateDateDim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTabl_Memember_loyality_prog_fact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Pizza_Project_PAYMENT_REF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_STG_PAYMENT_METHOD_csv",
								"type": "DatasetReference"
							},
							"name": "STGPAYMENTMETHODcsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_SqlServer_PizzaProject_PAYMENT_REF",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "surrogateKeyPaymentRefKey"
						},
						{
							"name": "select1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PAYMENT_ID as integer,",
						"          PAYMENT_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGPAYMENTMETHODcsv",
						"STGPAYMENTMETHODcsv derive(USER_CREATE_DATE = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 keyGenerate(output(Payment_Ref_Key as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyPaymentRefKey",
						"surrogateKeyPaymentRefKey select(mapColumn(",
						"          Payment_Ref_Key,",
						"          PAYMENT_ID,",
						"          PAYMENT_TYPE,",
						"          USER_CREATE_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['PAYMENT_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Payment_Ref_Key,",
						"          PAYMENT_ID,",
						"          PAYMENT_TYPE,",
						"          USER_CREATE_DATE",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_STG_PAYMENT_METHOD_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_PizzaProject_PAYMENT_REF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Pizza_Project_PRODUCT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_STG_PRODUCT_csv",
								"type": "DatasetReference"
							},
							"name": "STGPRODUCTcsv"
						},
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_STG_PRODUCT_SUB_CATEGORY_csv",
								"type": "DatasetReference"
							},
							"name": "STGPRODUCTSUBCATEGORYcsv"
						},
						{
							"dataset": {
								"referenceName": "data_target_AzureProject_Stg_STG_PRODUCT_CATEGORY_csv",
								"type": "DatasetReference"
							},
							"name": "STGPRODUCTCATEGORYcsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_SqlServer_PizzaProject_PRODUCT",
								"type": "DatasetReference"
							},
							"name": "PRODUCT"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "surrogateKeyPRODUCTDIMKEY"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_ID as short,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          CALORIES as short,",
						"          IS_ACTIVE as string,",
						"          PRODUCT_SUBCATEGORY_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGPRODUCTcsv",
						"source(output(",
						"          PRODUCT_SUBCATEGORY_ID as short,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_CATEGORY_ID as short,",
						"          IS_ACTIVE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGPRODUCTSUBCATEGORYcsv",
						"source(output(",
						"          PRODUCT_CATEGORY_ID as short,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_CATEGORY_DESCRIPTION as string,",
						"          IS_ACTIVE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGPRODUCTCATEGORYcsv",
						"STGPRODUCTcsv, STGPRODUCTSUBCATEGORYcsv join(STGPRODUCTcsv@PRODUCT_SUBCATEGORY_ID == STGPRODUCTSUBCATEGORYcsv@PRODUCT_SUBCATEGORY_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, STGPRODUCTCATEGORYcsv join(STGPRODUCTSUBCATEGORYcsv@PRODUCT_CATEGORY_ID == STGPRODUCTCATEGORYcsv@PRODUCT_CATEGORY_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"surrogateKeyPRODUCTDIMKEY derive(CREATE_USER_ID = currentUTC(),",
						"          o_prod_Price = replace(PRODUCT_PRICE, '$', '')) ~> derivedColumn1",
						"select1 keyGenerate(output(PRODUCT_DIM_KEY as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyPRODUCTDIMKEY",
						"join2 select(mapColumn(",
						"          PRODUCT_ID,",
						"          PRODUCT_NAME,",
						"          PRODUCT_PRICE,",
						"          IS_ACTIVE = STGPRODUCTcsv@IS_ACTIVE,",
						"          PRODUCT_CATEGORY_NAME,",
						"          PRODUCT_SIZE,",
						"          PRODUCT_DESCRIPTION,",
						"          PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SUBCATEGORY_ID = STGPRODUCTSUBCATEGORYcsv@PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_CATEGORY_ID = STGPRODUCTCATEGORYcsv@PRODUCT_CATEGORY_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1 select(mapColumn(",
						"          PRODUCT_DIM_KEY,",
						"          PRODUCT_ID,",
						"          PRODUCT_NAME,",
						"          PRODUCT_PRICE = o_prod_Price,",
						"          IS_ACTIVE,",
						"          PRODUCT_CATEGORY_ID,",
						"          PRODUCT_CATEGORY_NAME,",
						"          PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE,",
						"          PRODUCT_DESCRIPTION,",
						"          CREATE_USER_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> PRODUCT"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_STG_PRODUCT_csv')]",
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_STG_PRODUCT_SUB_CATEGORY_csv')]",
				"[concat(variables('factoryId'), '/datasets/data_target_AzureProject_Stg_STG_PRODUCT_CATEGORY_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_PizzaProject_PRODUCT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Pizza_Project_Product_Dim_SDC2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_SqlServer_PizzaProject_PRODUCT",
								"type": "DatasetReference"
							},
							"name": "sourceHrProduct"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_HR_PRODUCT_DIM",
								"type": "DatasetReference"
							},
							"name": "sourceHrProductDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_HR_PRODUCT_DIM",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_HR_PRODUCT_DIM",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "split1"
						},
						{
							"name": "select2"
						},
						{
							"name": "select3"
						},
						{
							"name": "surrogateKeySurrProductKey"
						},
						{
							"name": "select4"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_DIM_KEY as long,",
						"          PRODUCT_ID as short,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as string,",
						"          IS_ACTIVE as string,",
						"          PRODUCT_CATEGORY_ID as short,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_SUBCATEGORY_ID as short,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          CREATE_USER_ID as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceHrProduct",
						"source(output(",
						"          SURR_PRODUCT_KEY as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as decimal(5,2),",
						"          IS_ACTIVE as string,",
						"          PRODUCT_CATEGORY_ID as integer,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_SUBCATEGORY_ID as integer,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          EFF_START_DATE as date,",
						"          EFF_END_DATE as date,",
						"          FLAG as integer,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceHrProductDim",
						"lookup1 derive(Dm_user_date = currentUTC(),",
						"          Flag_I_U = iif(isNull(TGT_PRODUCT_ID),'Insert', iif(!isNull(TGT_PRODUCT_ID) && PRODUCT_NAME != TGT_PRODUCT_NAME,'Update','NC')),",
						"          Active_Flag = 1,",
						"          InActive_Flag = 0,",
						"          o_Effective_Date = currentDate(),",
						"          o_End_Date = toDate('12/31/9999','mm/dd/yyyy','en-US')) ~> derivedColumn1",
						"split1@INS select(mapColumn(",
						"          PRODUCT_ID,",
						"          PRODUCT_NAME,",
						"          PRODUCT_PRICE,",
						"          IS_ACTIVE,",
						"          PRODUCT_CATEGORY_ID,",
						"          PRODUCT_CATEGORY_NAME,",
						"          PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE,",
						"          PRODUCT_DESCRIPTION,",
						"          Dm_user_date,",
						"          Active_Flag,",
						"          o_Effective_Date,",
						"          o_End_Date,",
						"          Flag_I_U",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"filter1, select3 lookup(PRODUCT_ID == TGT_PRODUCT_ID,",
						"     multiple: true,",
						"     broadcast: 'auto',",
						"     pickup: 'any')~> lookup1",
						"sourceHrProduct filter(IS_ACTIVE=='Active') ~> filter1",
						"derivedColumn1 split(Flag_I_U=='Insert' || Flag_I_U=='Update',",
						"     Flag_I_U=='Update',",
						"     Flag_I_U=='NC',",
						"     disjoint: false) ~> split1@(INS, UpdateUpdate, default)",
						"split1@UpdateUpdate select(mapColumn(",
						"          TGT_SURR_PRODUCT_KEY,",
						"          InActive_Flag,",
						"          o_Effective_Date,",
						"          PRODUCT_ID = TGT_PRODUCT_ID,",
						"          Flag_I_U",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"sourceHrProductDim select(mapColumn(",
						"          TGT_SURR_PRODUCT_KEY = SURR_PRODUCT_KEY,",
						"          TGT_PRODUCT_ID = PRODUCT_ID,",
						"          TGT_PRODUCT_NAME = PRODUCT_NAME,",
						"          TGT_PRODUCT_PRICE = PRODUCT_PRICE,",
						"          TGT_IS_ACTIVE = IS_ACTIVE,",
						"          TGT_PRODUCT_CATEGORY_ID = PRODUCT_CATEGORY_ID,",
						"          TGT_PRODUCT_CATEGORY_NAME = PRODUCT_CATEGORY_NAME,",
						"          TGT_PRODUCT_SUBCATEGORY_ID = PRODUCT_SUBCATEGORY_ID,",
						"          TGT_PRODUCT_SUBCATEGORY_NAME = PRODUCT_SUBCATEGORY_NAME,",
						"          TGT_PRODUCT_SIZE = PRODUCT_SIZE,",
						"          TGT_PRODUCT_DESCRIPTION = PRODUCT_DESCRIPTION,",
						"          EFF_START_DATE,",
						"          EFF_END_DATE,",
						"          FLAG,",
						"          CREATE_USER_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select1 keyGenerate(output(SURR_PRODUCT_KEY as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeySurrProductKey",
						"surrogateKeySurrProductKey select(mapColumn(",
						"          SURR_PRODUCT_KEY,",
						"          PRODUCT_ID,",
						"          PRODUCT_NAME,",
						"          PRODUCT_PRICE,",
						"          IS_ACTIVE,",
						"          PRODUCT_CATEGORY_ID,",
						"          PRODUCT_CATEGORY_NAME,",
						"          PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE,",
						"          PRODUCT_DESCRIPTION,",
						"          Dm_user_date,",
						"          Active_Flag,",
						"          o_Effective_Date,",
						"          o_End_Date,",
						"          Flag_I_U",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select2 alterRow(updateIf(Flag_I_U=='Update')) ~> alterRow1",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SURR_PRODUCT_KEY as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as decimal(5,2),",
						"          IS_ACTIVE as string,",
						"          PRODUCT_CATEGORY_ID as integer,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_SUBCATEGORY_ID as integer,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          EFF_START_DATE as date,",
						"          EFF_END_DATE as date,",
						"          FLAG as integer,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PRODUCT_ID,",
						"          PRODUCT_NAME,",
						"          PRODUCT_PRICE,",
						"          IS_ACTIVE,",
						"          PRODUCT_CATEGORY_ID,",
						"          PRODUCT_CATEGORY_NAME,",
						"          PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE,",
						"          PRODUCT_DESCRIPTION,",
						"          EFF_START_DATE = o_Effective_Date,",
						"          EFF_END_DATE = o_End_Date,",
						"          FLAG = Active_Flag,",
						"          CREATE_USER_DATE = Dm_user_date",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SURR_PRODUCT_KEY as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as decimal(5,2),",
						"          IS_ACTIVE as string,",
						"          PRODUCT_CATEGORY_ID as integer,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_SUBCATEGORY_ID as integer,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          EFF_START_DATE as date,",
						"          EFF_END_DATE as date,",
						"          FLAG as integer,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['PRODUCT_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EFF_END_DATE = o_Effective_Date,",
						"          FLAG = InActive_Flag,",
						"          PRODUCT_ID",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_PizzaProject_PRODUCT')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_HR_PRODUCT_DIM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Pizza_Project_Product_Dim_SDC2_AnandSir')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_SqlServer_PizzaProject_PRODUCT",
								"type": "DatasetReference"
							},
							"name": "sourceHrProduct"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_HR_PRODUCT_DIM",
								"type": "DatasetReference"
							},
							"name": "sourceHrProductDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_HR_PRODUCT_DIM",
								"type": "DatasetReference"
							},
							"name": "Updatesink2"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_HR_PRODUCT_DIM",
								"type": "DatasetReference"
							},
							"name": "Insertsink1"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "select4"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "filterInsert"
						},
						{
							"name": "filterUpdate"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "derivedColumn5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_DIM_KEY as long,",
						"          PRODUCT_ID as short,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as string,",
						"          IS_ACTIVE as string,",
						"          PRODUCT_CATEGORY_ID as short,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_SUBCATEGORY_ID as short,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          CREATE_USER_ID as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceHrProduct",
						"source(output(",
						"          SURR_PRODUCT_KEY as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as decimal(5,2),",
						"          IS_ACTIVE as string,",
						"          PRODUCT_CATEGORY_ID as integer,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_SUBCATEGORY_ID as integer,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          EFF_START_DATE as date,",
						"          EFF_END_DATE as date,",
						"          FLAG as integer,",
						"          CREATE_USER_DATE as date,",
						"          MD5_CHECKSUM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from hr.product_dim where flag = 1 ',",
						"     format: 'query') ~> sourceHrProductDim",
						"derivedColumn2, derivedColumn5 lookup(sourceHrProduct@PRODUCT_ID == sourceHrProductDim@PRODUCT_ID,",
						"     multiple: true,",
						"     broadcast: 'auto',",
						"     pickup: 'any')~> lookup1",
						"sourceHrProduct filter(IS_ACTIVE=='Active') ~> filter1",
						"derivedColumn3 select(mapColumn(",
						"          SURR_PRODUCT_KEY,",
						"          InActiveFlag,",
						"          MD5_CHECKSUM,",
						"          o_DT,",
						"          o_Create_User_Date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"derivedColumn4 select(mapColumn(",
						"          PRODUCT_ID = sourceHrProduct@PRODUCT_ID,",
						"          PRODUCT_NAME = sourceHrProduct@PRODUCT_NAME,",
						"          PRODUCT_PRICE = sourceHrProduct@PRODUCT_PRICE,",
						"          IS_ACTIVE = sourceHrProduct@IS_ACTIVE,",
						"          PRODUCT_CATEGORY_ID = sourceHrProduct@PRODUCT_CATEGORY_ID,",
						"          PRODUCT_CATEGORY_NAME = sourceHrProduct@PRODUCT_CATEGORY_NAME,",
						"          PRODUCT_SUBCATEGORY_ID = sourceHrProduct@PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME = sourceHrProduct@PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE = sourceHrProduct@PRODUCT_SIZE,",
						"          PRODUCT_DESCRIPTION = sourceHrProduct@PRODUCT_DESCRIPTION,",
						"          src_Md5,",
						"          MD5_CHECKSUM,",
						"          ActiveFlag,",
						"          o_Date,",
						"          o_Create_User_Date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select2 alterRow(updateIf(1==1)) ~> alterRow1",
						"select4 alterRow(insertIf(1==1)) ~> alterRow2",
						"filter1 derive(src_Md5 = md5(concat(\r",
						"    PRODUCT_NAME, \r",
						"    PRODUCT_PRICE, \r",
						"    PRODUCT_DESCRIPTION, \r",
						"    toString(PRODUCT_SUBCATEGORY_ID), \r",
						"    PRODUCT_SUBCATEGORY_NAME, \r",
						"    PRODUCT_SIZE, \r",
						"    PRODUCT_CATEGORY_NAME, \r",
						"    toString(PRODUCT_CATEGORY_ID)\r",
						"))) ~> derivedColumn2",
						"lookup1 filter(isNull(SURR_PRODUCT_KEY) || src_Md5 != tgt_MD5) ~> filterInsert",
						"lookup1 filter(src_Md5 != tgt_MD5) ~> filterUpdate",
						"filterUpdate derive(InActiveFlag = 0,",
						"          o_DT = currentDate(),",
						"          o_Create_User_Date = currentDate()) ~> derivedColumn3",
						"filterInsert derive(ActiveFlag = 1,",
						"          o_Date = currentDate(),",
						"          o_Create_User_Date = currentDate()) ~> derivedColumn4",
						"sourceHrProductDim derive(tgt_MD5 = md5(concat(\r",
						"    PRODUCT_NAME, \r",
						"    toString(PRODUCT_PRICE), \r",
						"    PRODUCT_DESCRIPTION, \r",
						"    toString(PRODUCT_SUBCATEGORY_ID), \r",
						"    PRODUCT_SUBCATEGORY_NAME, \r",
						"    PRODUCT_SIZE, \r",
						"    PRODUCT_CATEGORY_NAME, \r",
						"    toString(PRODUCT_CATEGORY_ID)\r",
						"))) ~> derivedColumn5",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SURR_PRODUCT_KEY as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as decimal(5,2),",
						"          IS_ACTIVE as string,",
						"          PRODUCT_CATEGORY_ID as integer,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_SUBCATEGORY_ID as integer,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          EFF_START_DATE as date,",
						"          EFF_END_DATE as date,",
						"          FLAG as integer,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['SURR_PRODUCT_KEY'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SURR_PRODUCT_KEY,",
						"          EFF_END_DATE = o_DT,",
						"          FLAG = InActiveFlag,",
						"          CREATE_USER_DATE = o_Create_User_Date",
						"     )) ~> Updatesink2",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SURR_PRODUCT_KEY as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as decimal(5,2),",
						"          IS_ACTIVE as string,",
						"          PRODUCT_CATEGORY_ID as integer,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_SUBCATEGORY_ID as integer,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          EFF_START_DATE as date,",
						"          EFF_END_DATE as date,",
						"          FLAG as integer,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PRODUCT_ID,",
						"          PRODUCT_NAME,",
						"          PRODUCT_PRICE,",
						"          IS_ACTIVE,",
						"          PRODUCT_CATEGORY_ID,",
						"          PRODUCT_CATEGORY_NAME,",
						"          PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE,",
						"          PRODUCT_DESCRIPTION,",
						"          EFF_START_DATE = o_Date,",
						"          FLAG = ActiveFlag,",
						"          CREATE_USER_DATE = o_Create_User_Date",
						"     )) ~> Insertsink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_PizzaProject_PRODUCT')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_HR_PRODUCT_DIM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Pizza_Project_Product_Dim_SDC2_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_SqlServer_PizzaProject_PRODUCT",
								"type": "DatasetReference"
							},
							"name": "sourceHrProduct"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrProductDimCopy",
								"type": "DatasetReference"
							},
							"name": "sourceHrProductDimCopy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrProductDimCopy",
								"type": "DatasetReference"
							},
							"name": "Insertsink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrProductDimCopy",
								"type": "DatasetReference"
							},
							"name": "Updatesink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_DIM_KEY as long,",
						"          PRODUCT_ID as short,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as string,",
						"          IS_ACTIVE as string,",
						"          PRODUCT_CATEGORY_ID as short,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_SUBCATEGORY_ID as short,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          CREATE_USER_ID as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceHrProduct",
						"source(output(",
						"          SURR_PRODUCT_KEY as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as decimal(5,2),",
						"          IS_ACTIVE as string,",
						"          PRODUCT_CATEGORY_ID as integer,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_SUBCATEGORY_ID as integer,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          EFF_START_DATE as date,",
						"          EFF_END_DATE as date,",
						"          FLAG as integer,",
						"          CREATE_USER_DATE as date,",
						"          MD5_CHECKSUM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT * FROM HR.PRODUCT_DIM_COPY where FLAG = 1 \\n',",
						"     format: 'query') ~> sourceHrProductDimCopy",
						"lookup1 derive(Dm_user_date = currentUTC(),",
						"          Flag_I_U = iif(isNull(SURR_PRODUCT_KEY),'Insert', iif(src_MD5 != MD5_CHECKSUM,'Update','NC')),",
						"          Active_Flag = 1,",
						"          InActive_Flag = 0,",
						"          o_Effective_Date = currentDate(),",
						"          o_End_Date = toDate('12/31/9999', 'MM/dd/yyyy', 'en-US')) ~> derivedColumn1",
						"filter3 select(mapColumn(",
						"          PRODUCT_ID = sourceHrProduct@PRODUCT_ID,",
						"          PRODUCT_NAME = sourceHrProduct@PRODUCT_NAME,",
						"          PRODUCT_PRICE = sourceHrProduct@PRODUCT_PRICE,",
						"          IS_ACTIVE = sourceHrProduct@IS_ACTIVE,",
						"          PRODUCT_CATEGORY_ID = sourceHrProduct@PRODUCT_CATEGORY_ID,",
						"          PRODUCT_CATEGORY_NAME = sourceHrProduct@PRODUCT_CATEGORY_NAME,",
						"          PRODUCT_SUBCATEGORY_ID = sourceHrProduct@PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME = sourceHrProduct@PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE = sourceHrProduct@PRODUCT_SIZE,",
						"          PRODUCT_DESCRIPTION = sourceHrProduct@PRODUCT_DESCRIPTION,",
						"          Dm_user_date,",
						"          Active_Flag,",
						"          o_Effective_Date,",
						"          o_End_Date,",
						"          src_MD5,",
						"          Flag_I_U",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn2, sourceHrProductDimCopy lookup(sourceHrProduct@PRODUCT_ID == sourceHrProductDimCopy@PRODUCT_ID,",
						"     multiple: true,",
						"     broadcast: 'auto',",
						"     pickup: 'any')~> lookup1",
						"sourceHrProduct filter(IS_ACTIVE=='Active') ~> filter1",
						"filter2 select(mapColumn(",
						"          TGT_SURR_PRODUCT_KEY = SURR_PRODUCT_KEY,",
						"          InActive_Flag,",
						"          o_Effective_Date,",
						"          Flag_I_U,",
						"          Dm_user_date,",
						"          src_MD5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 alterRow(updateIf(Flag_I_U=='Update')) ~> alterRow1",
						"derivedColumn1 filter(Flag_I_U == 'Update') ~> filter2",
						"derivedColumn1 filter(Flag_I_U == 'Insert' || Flag_I_U == 'Update') ~> filter3",
						"filter1 derive(src_MD5 = md5(concat(    PRODUCT_NAME,     PRODUCT_PRICE,     PRODUCT_DESCRIPTION,     toString(PRODUCT_SUBCATEGORY_ID),     PRODUCT_SUBCATEGORY_NAME,     PRODUCT_SIZE,     PRODUCT_CATEGORY_NAME,     toString(PRODUCT_CATEGORY_ID)))) ~> derivedColumn2",
						"select1 alterRow(insertIf(Flag_I_U=='Insert'||Flag_I_U=='Update')) ~> alterRow2",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SURR_PRODUCT_KEY as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as decimal(5,2),",
						"          IS_ACTIVE as string,",
						"          PRODUCT_CATEGORY_ID as integer,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_SUBCATEGORY_ID as integer,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          EFF_START_DATE as date,",
						"          EFF_END_DATE as date,",
						"          FLAG as integer,",
						"          CREATE_USER_DATE as date,",
						"          MD5_CHECKSUM as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PRODUCT_ID,",
						"          PRODUCT_NAME,",
						"          PRODUCT_PRICE,",
						"          IS_ACTIVE,",
						"          PRODUCT_CATEGORY_ID,",
						"          PRODUCT_CATEGORY_NAME,",
						"          PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE,",
						"          PRODUCT_DESCRIPTION,",
						"          EFF_START_DATE = o_Effective_Date,",
						"          EFF_END_DATE = o_End_Date,",
						"          FLAG = Active_Flag,",
						"          CREATE_USER_DATE = Dm_user_date,",
						"          MD5_CHECKSUM = src_MD5",
						"     )) ~> Insertsink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SURR_PRODUCT_KEY as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as decimal(5,2),",
						"          IS_ACTIVE as string,",
						"          PRODUCT_CATEGORY_ID as integer,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_SUBCATEGORY_ID as integer,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          EFF_START_DATE as date,",
						"          EFF_END_DATE as date,",
						"          FLAG as integer,",
						"          CREATE_USER_DATE as date,",
						"          MD5_CHECKSUM as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['SURR_PRODUCT_KEY'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SURR_PRODUCT_KEY = TGT_SURR_PRODUCT_KEY,",
						"          EFF_END_DATE = o_Effective_Date,",
						"          FLAG = InActive_Flag,",
						"          CREATE_USER_DATE = Dm_user_date",
						"     )) ~> Updatesink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_PizzaProject_PRODUCT')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHrProductDimCopy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Pizza_Project_SALES_FACT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrderLineDim",
								"type": "DatasetReference"
							},
							"name": "OrderLine"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrder_dim",
								"type": "DatasetReference"
							},
							"name": "Order"
						},
						{
							"dataset": {
								"referenceName": "ds_SqlServer_CustomerDim",
								"type": "DatasetReference"
							},
							"name": "Customer"
						},
						{
							"dataset": {
								"referenceName": "ds_SqlServer_PizzaProject_PAYMENT_REF",
								"type": "DatasetReference"
							},
							"name": "PaymentRef"
						},
						{
							"dataset": {
								"referenceName": "ds_PizzaProject_CHANNEL_REF",
								"type": "DatasetReference"
							},
							"name": "ChannelRef"
						},
						{
							"dataset": {
								"referenceName": "ds_SqlServer_PizzaProject_DELIVERY_TYPE_REF",
								"type": "DatasetReference"
							},
							"name": "DeliveryTypeRef"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableProduct_Topping_Dim",
								"type": "DatasetReference"
							},
							"name": "ProductToppingDim"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrLocationDim",
								"type": "DatasetReference"
							},
							"name": "LocationDim"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_HR_PRODUCT_DIM",
								"type": "DatasetReference"
							},
							"name": "ProductDim"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrPromotionDim",
								"type": "DatasetReference"
							},
							"name": "PromotionDim"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableDateDateDim",
								"type": "DatasetReference"
							},
							"name": "DateDataDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrSalesFact",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "join5"
						},
						{
							"name": "join6"
						},
						{
							"name": "join7"
						},
						{
							"name": "join8"
						},
						{
							"name": "join9"
						},
						{
							"name": "join10"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_LINE_ID as integer,",
						"          UNIT_PRICE as decimal(5,2),",
						"          QUANTITY as integer,",
						"          PROMOTION_AMOUNT as decimal(5,2),",
						"          PROMOTION_ID as integer,",
						"          ORDER_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_TOPPING_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> OrderLine",
						"source(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATE as date,",
						"          ORDER_STATUS as string,",
						"          TOTAL_AMOUNT as decimal(5,2),",
						"          TOTAL_TAX as decimal(5,2),",
						"          TIPS as decimal(5,2),",
						"          TOTAL_QUANTITY as integer,",
						"          DELIVERY_ID as integer,",
						"          CHANNEL_ID as integer,",
						"          STORE_LOCATION_ID as integer,",
						"          CUSTOMER_ID as integer,",
						"          PAYMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Order",
						"source(output(",
						"          CUSTOMER_DIM_KEY as long,",
						"          customer_id as short,",
						"          CUSTOMER_FIRST_NAME as string,",
						"          CUSTOMER_LAST_NAME as string,",
						"          IS_LOYAL as boolean,",
						"          PrimaryEMAIL as string,",
						"          SecondaryEMAIL as string,",
						"          PRIMARY_PHONE_NUMBER as string,",
						"          SECONDARY_PHONE_NUMBER as string,",
						"          Office_ADDRESS_LANE1 as string,",
						"          Office_ADDRESS_LANE_2 as string,",
						"          Office_CITY_NAME as string,",
						"          Office_STATE_NAME as string,",
						"          Office_COUNTRY_NAME as string,",
						"          Office_ZIP_CODE as integer,",
						"          Office_GATE_CODE as short,",
						"          Residential_ADDRESS_LANE1 as string,",
						"          Residential_ADDRESS_LANE_2 as string,",
						"          Residential_CITY_NAME as string,",
						"          Residential_STATE_NAME as string,",
						"          Residential_COUNTRY_NAME as string,",
						"          Residential_ZIP_CODE as integer,",
						"          Residential_GATE_CODE as short,",
						"          JOINING_DATE as string,",
						"          STG_CREATE_USER_ID as string,",
						"          STG_CREATE_USER_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Customer",
						"source(output(",
						"          Payment_Ref_Key as long,",
						"          PAYMENT_ID as integer,",
						"          PAYMENT_TYPE as string,",
						"          USER_CREATE_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> PaymentRef",
						"source(output(",
						"          CHANNEL_REF_KEY as long,",
						"          CHANNEL_ID as short,",
						"          CHANNEL_TYPE as string,",
						"          CREATE_USER_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ChannelRef",
						"source(output(",
						"          DELIVERY_TYPE_REF_KEY as long,",
						"          DELIVERY_ID as integer,",
						"          DELIVERY_TYPE as string,",
						"          CREATE_USER_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DeliveryTypeRef",
						"source(output(",
						"          Product_Topping_Dim_Key as long,",
						"          PRODUCT_TOPPING_ID as integer,",
						"          TOPPING_NAME as string,",
						"          TOPING_PRICE as decimal(10,2),",
						"          IS_ACTIVE as boolean,",
						"          EFFECTIVE_DATE as date,",
						"          END_DATE as date,",
						"          FLAG as string,",
						"          USER_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductToppingDim",
						"source(output(",
						"          Location_Dim_Key as integer,",
						"          STORE_LOCATION_ID as integer,",
						"          STORE_NAME as string,",
						"          STORE_ADDRESS as string,",
						"          STORE_PHONE_NUMBER as string,",
						"          STATE_COUNTRY as string,",
						"          STORE_OPEN_TIME as string,",
						"          STORE_CLOSE_TIME as string,",
						"          STATE_NAME as string,",
						"          CREATE_USER_DATE as date,",
						"          FLAG as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> LocationDim",
						"source(output(",
						"          SURR_PRODUCT_KEY as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as decimal(5,2),",
						"          IS_ACTIVE as string,",
						"          PRODUCT_CATEGORY_ID as integer,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_SUBCATEGORY_ID as integer,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          EFF_START_DATE as date,",
						"          EFF_END_DATE as date,",
						"          FLAG as integer,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductDim",
						"source(output(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as string,",
						"          PREVIOUS_DISCOUNT_AMOUNT as string,",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> PromotionDim",
						"source(output(",
						"          Date_Key as integer,",
						"          day_yyyy_mm_dd as date,",
						"          day_us_mm_dd_yyyy as date,",
						"          day_us_long as string,",
						"          day_us_m_d_yy as date,",
						"          week_short as string,",
						"          week_number as integer,",
						"          week_long as string,",
						"          month_in_quarter_number as string,",
						"          month_in_year_short as string,",
						"          month_in_year_long as string,",
						"          week_wk_qtr_year as string,",
						"          week_from_to as string,",
						"          week_starting as string,",
						"          week_wk_year_cont as string,",
						"          week_wk_year as string,",
						"          week_wk_qtr_year_cont as string,",
						"          day_in_week_short as string,",
						"          day_in_week_number as integer,",
						"          day_in_week_long as string,",
						"          month_short as string,",
						"          month_number as string,",
						"          month_long as string,",
						"          quarter_short_us as string,",
						"          year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DateDataDim",
						"OrderLine, Order join(OrderLine@ORDER_ID == Order@ORDER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, Customer join(Order@CUSTOMER_ID == Customer@customer_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, PaymentRef join(Order@PAYMENT_ID == PaymentRef@PAYMENT_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, ChannelRef join(Order@CHANNEL_ID == ChannelRef@CHANNEL_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4, DeliveryTypeRef join(Order@DELIVERY_ID == DeliveryTypeRef@DELIVERY_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5, ProductToppingDim join(OrderLine@PRODUCT_TOPPING_ID == ProductToppingDim@PRODUCT_TOPPING_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6, LocationDim join(Order@STORE_LOCATION_ID == LocationDim@STORE_LOCATION_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join7",
						"join7, ProductDim join(OrderLine@PRODUCT_ID == ProductDim@PRODUCT_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join8",
						"join8, PromotionDim join(OrderLine@PROMOTION_ID == PromotionDim@PROMOTION_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join9",
						"join9, DateDataDim join(ORDER_DATE == day_yyyy_mm_dd,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          ORDER_LINE_ID,",
						"          ORDER_ID = Order@ORDER_ID,",
						"          CUSTOMER_DIM_KEY,",
						"          Payment_Ref_Key,",
						"          CHANNEL_REF_KEY,",
						"          DELIVERY_TYPE_REF_KEY,",
						"          Location_Dim_Key,",
						"          PRODUCT_KEY = SURR_PRODUCT_KEY,",
						"          PROMOTION_DIM_KEY,",
						"          Product_Topping_Dim_Key,",
						"          Date_Key,",
						"          ORDER_DATE,",
						"          ORDER_STATUS,",
						"          QUANTITY,",
						"          UNIT_PRICE,",
						"          TOPING_PRICE,",
						"          PROMOTION_AMOUNT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          order_line_id as integer,",
						"          order_id as integer,",
						"          customer_dim_key as long,",
						"          payment_ref_key as long,",
						"          channel_ref_key as long,",
						"          delivery_type_ref_key as long,",
						"          product_topping_dim_key as long,",
						"          location_dim_key as integer,",
						"          SURR_PRODUCT_KEY as integer,",
						"          promotion_dim_key as integer,",
						"          date_key as integer,",
						"          order_date as date,",
						"          order_status as string,",
						"          quantity as integer,",
						"          unit_price as decimal(5,2),",
						"          toping_price as decimal(10,2),",
						"          promotion_amount as decimal(5,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          order_line_id = ORDER_LINE_ID,",
						"          order_id = ORDER_ID,",
						"          customer_dim_key = CUSTOMER_DIM_KEY,",
						"          payment_ref_key = Payment_Ref_Key,",
						"          channel_ref_key = CHANNEL_REF_KEY,",
						"          delivery_type_ref_key = DELIVERY_TYPE_REF_KEY,",
						"          product_topping_dim_key = Product_Topping_Dim_Key,",
						"          location_dim_key = Location_Dim_Key,",
						"          SURR_PRODUCT_KEY = PRODUCT_KEY,",
						"          promotion_dim_key = PROMOTION_DIM_KEY,",
						"          date_key = Date_Key,",
						"          order_date = ORDER_DATE,",
						"          order_status = ORDER_STATUS,",
						"          quantity = QUANTITY,",
						"          unit_price = UNIT_PRICE,",
						"          toping_price = TOPING_PRICE,",
						"          promotion_amount = PROMOTION_AMOUNT",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrderLineDim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrder_dim')]",
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_CustomerDim')]",
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_PizzaProject_PAYMENT_REF')]",
				"[concat(variables('factoryId'), '/datasets/ds_PizzaProject_CHANNEL_REF')]",
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_PizzaProject_DELIVERY_TYPE_REF')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableProduct_Topping_Dim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHrLocationDim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_HR_PRODUCT_DIM')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHrPromotionDim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDateDateDim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHrSalesFact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Pizza_Project_customer_review_fact')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableStg_customer_review",
								"type": "DatasetReference"
							},
							"name": "StgCustomerReview"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrder_dim",
								"type": "DatasetReference"
							},
							"name": "OrderDim"
						},
						{
							"dataset": {
								"referenceName": "ds_SqlServer_CustomerDim",
								"type": "DatasetReference"
							},
							"name": "CustomerDim"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrLocationDim",
								"type": "DatasetReference"
							},
							"name": "LocationDim"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableDateDateDim",
								"type": "DatasetReference"
							},
							"name": "DateDataDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTablehr_customer_review_fact",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_REVIEW_ID as integer,",
						"          RATING_SCALE as decimal(5,2),",
						"          FEEDBACK as string,",
						"          FEEDBACK_DATE as date,",
						"          RECOMENDED as string,",
						"          CUSTOMER_ID as integer,",
						"          ORDER_ID as integer,",
						"          STORE_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StgCustomerReview",
						"source(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATE as date,",
						"          ORDER_STATUS as string,",
						"          TOTAL_AMOUNT as decimal(5,2),",
						"          TOTAL_TAX as decimal(5,2),",
						"          TIPS as decimal(5,2),",
						"          TOTAL_QUANTITY as integer,",
						"          DELIVERY_ID as integer,",
						"          CHANNEL_ID as integer,",
						"          STORE_LOCATION_ID as integer,",
						"          CUSTOMER_ID as integer,",
						"          PAYMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> OrderDim",
						"source(output(",
						"          CUSTOMER_DIM_KEY as long,",
						"          customer_id as short,",
						"          CUSTOMER_FIRST_NAME as string,",
						"          CUSTOMER_LAST_NAME as string,",
						"          IS_LOYAL as boolean,",
						"          PrimaryEMAIL as string,",
						"          SecondaryEMAIL as string,",
						"          PRIMARY_PHONE_NUMBER as string,",
						"          SECONDARY_PHONE_NUMBER as string,",
						"          Office_ADDRESS_LANE1 as string,",
						"          Office_ADDRESS_LANE_2 as string,",
						"          Office_CITY_NAME as string,",
						"          Office_STATE_NAME as string,",
						"          Office_COUNTRY_NAME as string,",
						"          Office_ZIP_CODE as integer,",
						"          Office_GATE_CODE as short,",
						"          Residential_ADDRESS_LANE1 as string,",
						"          Residential_ADDRESS_LANE_2 as string,",
						"          Residential_CITY_NAME as string,",
						"          Residential_STATE_NAME as string,",
						"          Residential_COUNTRY_NAME as string,",
						"          Residential_ZIP_CODE as integer,",
						"          Residential_GATE_CODE as short,",
						"          JOINING_DATE as string,",
						"          STG_CREATE_USER_ID as string,",
						"          STG_CREATE_USER_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CustomerDim",
						"source(output(",
						"          Location_Dim_Key as integer,",
						"          STORE_LOCATION_ID as integer,",
						"          STORE_NAME as string,",
						"          STORE_ADDRESS as string,",
						"          STORE_PHONE_NUMBER as string,",
						"          STATE_COUNTRY as string,",
						"          STORE_OPEN_TIME as string,",
						"          STORE_CLOSE_TIME as string,",
						"          STATE_NAME as string,",
						"          CREATE_USER_DATE as date,",
						"          FLAG as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> LocationDim",
						"source(output(",
						"          Date_Key as integer,",
						"          day_yyyy_mm_dd as date,",
						"          day_us_mm_dd_yyyy as date,",
						"          day_us_long as string,",
						"          day_us_m_d_yy as date,",
						"          week_short as string,",
						"          week_number as integer,",
						"          week_long as string,",
						"          month_in_quarter_number as string,",
						"          month_in_year_short as string,",
						"          month_in_year_long as string,",
						"          week_wk_qtr_year as string,",
						"          week_from_to as string,",
						"          week_starting as string,",
						"          week_wk_year_cont as string,",
						"          week_wk_year as string,",
						"          week_wk_qtr_year_cont as string,",
						"          day_in_week_short as string,",
						"          day_in_week_number as integer,",
						"          day_in_week_long as string,",
						"          month_short as string,",
						"          month_number as string,",
						"          month_long as string,",
						"          quarter_short_us as string,",
						"          year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DateDataDim",
						"StgCustomerReview, OrderDim join(StgCustomerReview@ORDER_ID == OrderDim@ORDER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, CustomerDim join(StgCustomerReview@CUSTOMER_ID == CustomerDim@customer_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, LocationDim join(OrderDim@STORE_LOCATION_ID == LocationDim@STORE_LOCATION_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, DateDataDim join(FEEDBACK_DATE == day_yyyy_mm_dd,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          CUSTOMER_DIM_KEY,",
						"          Location_Dim_Key,",
						"          Date_Key,",
						"          ORDER_ID = StgCustomerReview@ORDER_ID,",
						"          FEEDBACK,",
						"          FEEDBACK_DATE,",
						"          RECOMENDED",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_dim_key as long,",
						"          location_dim_key as integer,",
						"          date_key as integer,",
						"          order_id as integer,",
						"          feedback as string,",
						"          feedback_date as date,",
						"          recomended as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          customer_dim_key = CUSTOMER_DIM_KEY,",
						"          location_dim_key = Location_Dim_Key,",
						"          date_key = Date_Key,",
						"          order_id = ORDER_ID,",
						"          feedback = FEEDBACK,",
						"          feedback_date = FEEDBACK_DATE,",
						"          recomended = RECOMENDED",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableStg_customer_review')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrder_dim')]",
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_CustomerDim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHrLocationDim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDateDateDim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablehr_customer_review_fact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SCD1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_SQLSERVER_SCD1_FF_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_HR_SCD2",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_HR_SCD2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as short,",
						"          NAME as string,",
						"          SALARY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          ID as integer,",
						"          NAME as string,",
						"          SALARY as decimal(5,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1 cast(output(",
						"          ID as integer,",
						"          NAME as string,",
						"          SALARY as decimal(10,2)",
						"     ),",
						"     errors: true) ~> cast1",
						"lookup1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"cast1, source2 lookup(cast1@ID == source2@ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          NAME as string,",
						"          SALARY as decimal(5,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID = cast1@ID,",
						"          NAME = source1@NAME,",
						"          SALARY = cast1@SALARY",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_SQLSERVER_SCD1_FF_csv')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_HR_SCD2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SalaryIncrese')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_employees_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TGT_data_target_DataFlow_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(SalaryIncrese = SALARY+SALARY*0.1) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          SalaryIncrese,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['SalIncrese.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_employees_csv')]",
				"[concat(variables('factoryId'), '/datasets/TGT_data_target_DataFlow_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SelectCastAggregator')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds1_data_DataFlow_employees_csv",
								"type": "DatasetReference"
							},
							"name": "SrcDataDataFlowEmployeesCsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TGT_data_DataFlow_ParamFile",
								"type": "DatasetReference"
							},
							"name": "DataDataFlowHrSchemaCsv"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "rank1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> SrcDataDataFlowEmployeesCsv",
						"SrcDataDataFlowEmployeesCsv cast(output(",
						"          EMPLOYEE_ID as integer,",
						"          SALARY as decimal(10,0),",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 aggregate(groupBy(DEPARTMENT_ID),",
						"     SumOfSalary = sum(SALARY),",
						"          MinOfSalary = min(SALARY),",
						"          MaxOfSalary = max(SALARY),",
						"          AvgOfSalary = round(avg(SALARY)),",
						"          CountOfEmp = count(EMPLOYEE_ID)) ~> aggregate1",
						"sort1 keyGenerate(output(Seq_EmpID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"aggregate1 sort(asc(DEPARTMENT_ID, true)) ~> sort1",
						"surrogateKey1 rank(asc(DEPARTMENT_ID, true),",
						"     output(Dep_Rank as long)) ~> rank1",
						"rank1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DepWiseAgggregate.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DataDataFlowHrSchemaCsv"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds1_data_DataFlow_employees_csv')]",
				"[concat(variables('factoryId'), '/datasets/TGT_data_DataFlow_ParamFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SelectCastAnalytical')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds1_data_DataFlow_employees_csv",
								"type": "DatasetReference"
							},
							"name": "SrcDataDataFlowEmployeesCsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TGT_data_DataFlow_ParamFile",
								"type": "DatasetReference"
							},
							"name": "DataDataFlowHrSchemaCsv"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SrcDataDataFlowEmployeesCsv",
						"SrcDataDataFlowEmployeesCsv cast(output(",
						"          EMPLOYEE_ID as integer,",
						"          SALARY as decimal(10,0),",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 aggregate(groupBy(DEPARTMENT_ID),",
						"     SumOfSalary = sum(SALARY),",
						"          MinOfSalary = min(SALARY),",
						"          MaxOfSalary = max(SALARY),",
						"          AvgOfSalary = round(avg(SALARY)),",
						"          CountOfEmp = count(EMPLOYEE_ID)) ~> aggregate1",
						"join1 sort(asc(aggregate1@DEPARTMENT_ID, true)) ~> sort1",
						"aggregate1, cast1 join(aggregate1@DEPARTMENT_ID == cast1@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"sort1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          LAST_NAME,",
						"          FIRST_NAME,",
						"          SALARY,",
						"          DEPARTMENT_ID = cast1@DEPARTMENT_ID,",
						"          SumOfSalary,",
						"          MinOfSalary,",
						"          MaxOfSalary,",
						"          AvgOfSalary,",
						"          CountOfEmp",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DepWiseAnalytical.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DataDataFlowHrSchemaCsv"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds1_data_DataFlow_employees_csv')]",
				"[concat(variables('factoryId'), '/datasets/TGT_data_DataFlow_ParamFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SelectFilterActivity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds1_data_DataFlow_employees_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_ParamFileName",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     preferredIntegralType: 'integer',",
						"     preferredFractionalType: 'double',",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 filter(equals(DEPARTMENT_ID,'60')) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds1_data_DataFlow_employees_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_ParamFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_StgDate_DimDate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableDateData",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableDateDateDim",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Date_Key as string,",
						"          day_yyyy_mm_dd as string,",
						"          day_us_mm_dd_yyyy as string,",
						"          day_us_long as string,",
						"          day_us_m_d_yy as string,",
						"          week_short as string,",
						"          week_number as string,",
						"          week_long as string,",
						"          month_in_quarter_number as string,",
						"          month_in_year_short as string,",
						"          month_in_year_long as string,",
						"          week_wk_qtr_year as string,",
						"          week_from_to as string,",
						"          week_starting as string,",
						"          week_wk_year_cont as string,",
						"          week_wk_year as string,",
						"          week_wk_qtr_year_cont as string,",
						"          day_in_week_short as string,",
						"          day_in_week_number as string,",
						"          day_in_week_long as string,",
						"          month_short as string,",
						"          month_number as string,",
						"          month_long as string,",
						"          quarter_short_us as string,",
						"          year as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 cast(output(",
						"          Date_Key as integer,",
						"          day_yyyy_mm_dd as date 'MM/dd/yyyy',",
						"          day_us_mm_dd_yyyy as date 'MM/dd/yyyy',",
						"          day_us_m_d_yy as date 'MM/dd/yyyy',",
						"          week_number as integer,",
						"          day_in_week_number as integer,",
						"          year as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDateData')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDateDateDim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_TeatingScd2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "data_SQLSERVER_SCD1_FF_csv",
								"type": "DatasetReference"
							},
							"name": "Scd1FF"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableSCD2TESTING",
								"type": "DatasetReference"
							},
							"name": "HRSCD1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableSCD2TESTING",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableSCD2TESTING",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as short,",
						"          NAME as string,",
						"          SALARY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Scd1FF",
						"source(output(",
						"          SK_ID as integer,",
						"          ID as integer,",
						"          NAME as string,",
						"          SALARY as decimal(10,2),",
						"          FLAG as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> HRSCD1",
						"Scd1FF, select1 lookup(ID == tgt_ID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(ActiveFlag = 1,",
						"          InActiveFlag = 0) ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(tgt_SK_ID)) ~> filter1",
						"filter1 alterRow(updateIf(1==1)) ~> alterRow1",
						"HRSCD1 select(mapColumn(",
						"          tgt_SK_ID = SK_ID,",
						"          tgt_ID = ID,",
						"          tgt_NAME = NAME,",
						"          tgt_SALARY = SALARY,",
						"          tgt_FLAG = FLAG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SK_ID as integer,",
						"          ID as integer,",
						"          NAME as string,",
						"          SALARY as decimal(10,2),",
						"          FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          NAME,",
						"          SALARY,",
						"          FLAG = ActiveFlag",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SK_ID as integer,",
						"          ID as integer,",
						"          NAME as string,",
						"          SALARY as decimal(10,2),",
						"          FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['SK_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SK_ID = tgt_SK_ID,",
						"          ID = tgt_ID,",
						"          NAME = tgt_NAME,",
						"          SALARY = tgt_SALARY,",
						"          FLAG = InActiveFlag",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/data_SQLSERVER_SCD1_FF_csv')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableSCD2TESTING')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Union')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_source_Empabcdef_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "SRC_data_source_EmpNew_csv",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_ParamFileName",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as short,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          emp_id as short,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Union.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_source_Empabcdef_csv')]",
				"[concat(variables('factoryId'), '/datasets/SRC_data_source_EmpNew_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_ParamFileName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Window_Function')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_employees_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_data_dfnew_ParameterFile",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 window(over(DEPARTMENT_ID),",
						"     asc(SALARY, true),",
						"     LEAD_NEXT_SALARY = lead(SALARY),",
						"          LAG_PREVIOUS_SALARY = lag(SALARY),",
						"          RANK = rank(),",
						"          DENSE_RANK = denseRank(),",
						"          rowNumber = rowNumber()) ~> window1",
						"window1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          DEPARTMENT_ID,",
						"          SALARY,",
						"          LAG_PREVIOUS_SALARY,",
						"          LEAD_NEXT_SALARY,",
						"          RANK,",
						"          DENSE_RANK,",
						"          rowNumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DepWiseLeadLagRankDenseRankRowNumber.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_employees_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_data_dfnew_ParameterFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_adls_TO_SqlServer_employees')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_DataFlow_employees_csv",
								"type": "DatasetReference"
							},
							"name": "dsdataDataFlowemployeescsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_Param",
								"type": "DatasetReference"
							},
							"name": "SinkSqlServerEmployees"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     TABLENAME as string",
						"}",
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dsdataDataFlowemployeescsv",
						"dsdataDataFlowemployeescsv cast(output(",
						"          EMPLOYEE_ID as integer,",
						"          HIRE_DATE as date,",
						"          SALARY as decimal(10,2),",
						"          COMMISSION_PCT as decimal(5,2),",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> SinkSqlServerEmployees"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_DataFlow_employees_csv')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_Param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_adls_to_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DataFlowMix"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_input_DepartmentWiseEmp",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableRecreate",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short,",
						"          DEPARTMENT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'Filename',",
						"     wildcardPaths:['DepartmentWiseEmp/*.csv']) ~> source1",
						"source1 cast(output(",
						"          EMPLOYEE_ID as integer,",
						"          HIRE_DATE as date 'MM-dd-yyyy',",
						"          SALARY as decimal(10,2),",
						"          COMMISSION_PCT as decimal(5,2),",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID,",
						"          DEPARTMENT_NAME,",
						"          Filename",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_input_DepartmentWiseEmp')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableRecreate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_csv_to_stg_customer_review')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PizzaProject2024/DimDF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText5",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableStg_customer_review",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_REVIEW_ID as integer,",
						"          RATING_SCALE as decimal(5,2),",
						"          FEEDBACK as string,",
						"          FEEDBACK_DATE as date 'yyyy-MM-dd',",
						"          RECOMENDED as string,",
						"          CUSTOMER_ID as integer,",
						"          ORDER_ID as integer,",
						"          STORE_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText5')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableStg_customer_review')]"
			]
		}
	]
}